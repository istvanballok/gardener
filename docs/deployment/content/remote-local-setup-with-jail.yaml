apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: remote-local-setup-with-jail
  labels: {component: remote-local-setup-with-jail}
spec:
  replicas: 1
  selector:
    matchLabels: {component: remote-local-setup-with-jail}
  template:
    metadata:
      labels: {component: remote-local-setup-with-jail}
    spec:
      terminationGracePeriodSeconds: 1
      containers:
      - name: dev
        image: docker:26-dind
        command:
        - /bin/sh
        - -c
        - |
          set -ex -o pipefail
          if [ $(df /root | awk '/sdb/ {print $4}') -lt $((10 * 1024 * 1024)) ]; then
            echo "Less than 10 GB left, wiping the persistent disk"
            find /root -mindepth 2 -maxdepth 2 -exec rm -rf '{}' \;
          fi
          cd
          rm -f /root/start /root/elapsed*
          start=$(date +%s)
          echo $start > /root/start

          mkdir -p ~/.cache/apk
          ln -s ~/.cache/apk /etc/apk/cache

          apk add apache2-utils bash bash-completion bat bind-tools brotli conntrack-tools       \
                  coreutils curl diffutils dnsmasq docker-bash-completion findutils fzf g++ gawk \
                  gcompat git git-prompt grep helm inotify-tools jq k9s less lsof make mandoc mc \
                  moreutils mount ncurses neovim openssl parallel procps sed socat strace        \
                  sysstat sysstat-doc tar tcpdump tmux tmux-doc tzdata util-linux vim wget yq

          mkdir -p ~/.cache/wget
          cd ~/.cache/wget
          echo golang
               VERSION=$(curl -sL https://golang.org/VERSION?m=text | awk 'NR==1{print}')
               wget -N "https://go.dev/dl/$VERSION.linux-amd64.tar.gz"
               tar -C /usr/local -xzf "$VERSION.linux-amd64.tar.gz"
               ln -s /usr/local/go/bin/go /usr/local/bin/go
               ln -s /usr/local/go/bin/gofmt /usr/local/bin/gofmt
          echo gardenctl
               VERSION=$(curl -sL https://raw.githubusercontent.com/gardener/gardenctl-v2/master/LATEST)
               wget -N "https://github.com/gardener/gardenctl-v2/releases/download/$VERSION/gardenctl_v2_linux_amd64"
               cp gardenctl_v2_linux_amd64 /usr/local/bin/gardenctl
               chmod +x /usr/local/bin/gardenctl
               ln -s "$(which gardenctl)" /usr/local/bin/g
          echo gardenlogin
               VERSION=$(curl -sL https://raw.githubusercontent.com/gardener/gardenlogin/master/LATEST)
               wget -N "https://github.com/gardener/gardenlogin/releases/download/$VERSION/gardenlogin_linux_amd64"
               cp gardenlogin_linux_amd64 /usr/local/bin/gardenlogin
               chmod +x /usr/local/bin/gardenlogin
               ln -s "$(which gardenlogin)" /usr/local/bin/kubectl-gardenlogin
          echo kind
               VERSION=$(curl -sL https://api.github.com/repos/kubernetes-sigs/kind/releases/latest | jq .tag_name -r)
               wget -N "https://kind.sigs.k8s.io/dl/$VERSION/kind-linux-amd64"
               cp kind-linux-amd64 /usr/local/bin/kind
               chmod +x /usr/local/bin/kind
          echo kns
               wget -N "https://raw.githubusercontent.com/blendle/kns/master/bin/kns"
               cp kns /usr/local/bin/kns
               chmod +x /usr/local/bin/kns
          echo krew
               VERSION=$(curl -sL https://api.github.com/repos/kubernetes-sigs/krew/releases/latest | jq .tag_name -r)
               wget -N "https://github.com/kubernetes-sigs/krew/releases/download/$VERSION/krew-linux_amd64.tar.gz"
               tar -xzf krew-linux_amd64.tar.gz ./krew-linux_amd64
               mv krew-linux_amd64 /usr/local/bin/krew
               krew install krew
          echo ktx
               wget -N "https://raw.githubusercontent.com/blendle/kns/master/bin/ktx"
               cp ktx /usr/local/bin/ktx
               chmod +x /usr/local/bin/ktx
          echo kube-ps1
               wget -N "https://raw.githubusercontent.com/jonmosco/kube-ps1/master/kube-ps1.sh"
               cp kube-ps1.sh /usr/local/bin/kube-ps1.sh
          echo kubectl
               VERSION=$(curl -sL https://dl.k8s.io/release/stable.txt)
               wget -N "https://dl.k8s.io/release/$VERSION/bin/linux/amd64/kubectl"
               cp kubectl /usr/local/bin/kubectl
               chmod +x /usr/local/bin/kubectl
               ln -s "$(which kubectl)" /usr/local/bin/k
          echo tmux-completion
               wget -N "https://raw.githubusercontent.com/imomaliev/tmux-bash-completion/master/completions/tmux"
               cp tmux /usr/share/bash-completion/completions/tmux
          echo yaml2json
               VERSION=$(curl -sL https://api.github.com/repos/bronze1man/yaml2json/releases/latest | jq .tag_name -r)
               wget -N "https://github.com/bronze1man/yaml2json/releases/download/$VERSION/yaml2json_linux_amd64"
               cp yaml2json_linux_amd64 /usr/local/bin/yaml2json
               chmod +x /usr/local/bin/yaml2json
          cd
          echo delve
               go install github.com/go-delve/delve/cmd/dlv@latest
          echo gron
               go install github.com/tomnomnom/gron@latest
          echo ginkgo
               go install github.com/onsi/ginkgo/v2/ginkgo@latest
          echo stern
               go install github.com/stern/stern@latest
          echo neat
               krew install neat
          echo node-shell
               krew install node-shell

          bash -c "
            echo {{p,g}-seed,{gu,p,v}-local--local}.ingress.local.seed.local.gardener.cloud \
                 api.{e2e-managedseed.garden,local.local}.{internal,external}.local.gardener.cloud \
                 api.e2e-{hib,upg-hib,wake-up,migrate,rotate,default,upd-node,upgrade}{,-wl}.local.{internal,external}.local.gardener.cloud \
                 api.e2e-{unpriv,mgr-hib,force-delete,fd-hib}.local.{internal,external}.local.gardener.cloud
            " | sed 's/ /\n/g' | sed 's/^/172.18.255.1 /' | sort >> /etc/hosts
          echo "172.18.255.3 api.virtual-garden.local.gardener.cloud" >> /etc/hosts

          # Resolve e.g. gu-local--e2e-rotate{-wl}.ingress.$seed_name. ... for the e2e tests:
          sed 's/^  //' <<"EOF" > /etc/dnsmasq.d/gardener.conf
            address=/.seed.local.gardener.cloud/172.18.255.1
            address=/.garden.external.local.gardener.cloud/172.18.255.1
          EOF
          sed '1inameserver 127.0.0.1' /etc/resolv.conf > /tmp/resolv.conf && cat /tmp/resolv.conf > /etc/resolv.conf
          nice dnsmasq --no-daemon --log-debug --log-queries 2>&1 | ts > ~/.dnsmasq.log &

          ln -s /usr/share/zoneinfo/Europe/Berlin /etc/localtime

          sed 's/^  //' <<"EOF" > ~/greeting.sh
            [ -n "$TMUX" ] && exit
            export LANG=C.UTF-8
            export TERM=xterm-256color
            normal='\e[0m'; green='\e[1;32m'; yellow='\e[1;33m'; cyan='\e[1;36m'; n=$normal; g=$green; y=$yellow; c=$cyan
            echo -e "$(
            sed 's/^  //' <<GREETING_EOF
              ${c}Welcome${y} to the jailed version of the remote local setup pod of ${c}Gardener${y} as citizen!${n}

              ${c}Documentation:${n} https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally.md
              ${y}To ${c}exec${y} into this pod, run '${g}kubectl exec -it remote-local-setup-with-jail-0 -- sh${y}'${n}

              The "Gardener Operator Complete" tmux session is prepared by default.

              ${y}To attach to the ${c}tmux${y} session, run '${g}tmux a${y}'${n}.
              - ${y}mouse${n} support is enabled
                - use the mouse to select panes or windows and to resize panes
                - scroll the pane content with the mouse,
                  leave the "scroll mode" with '${y}q${n}' or scroll to the very bottom
                - after selecting some text, copy it with '${y}right-click${n}' or
                  cancel the selection with '${y}q${n}'
                - paste the copied text with '${y}⌘ right-click${n}'
              - '${y}CTRL-b${n}, ?' is the tmux prefix: press and hold the 'CTRL' key,
                  press the 'b' key, let go of both keys and then
                  press e.g. the '?' key to show the keyboard shortcuts.
                '${y}d${n}' - detach from the tmux session
                '${y}c${n}' - new window
                '${y}%${n}' or '${y}\"${n}' - new pane (horizontal or vertical split)
                '${y}z${n}' - zoom in/out
                '${y},${n}' - rename the window
                '${y}]${n}','${y}=${n}' - paste (with history).
                  The ${y}clipboard${n} is managed by tmux:
                  copy with the ${y}mouse${n}, paste with these shortcuts or the mouse.
                  You can turn off mouse reporting in the terminal emulator
                  (⌘-R in the default Mac OS Terminal app) for native copy/paste.
              - '${y}CTRL-d${n}' - exit a bash session. Not be confused with 'CTRL-b, d'

              ${y}When this remote local setup pod is not needed, consider ${c}stopping${y} it
              by scaling the StatefulSet to zero replicas:${n}
                kubectl scale statefulset remote-local-setup-with-jail --replicas 0

              ${y}To ${c}start${y} it, simply scale it to 1 replica:${n}
                kubectl scale statefulset remote-local-setup-with-jail --replicas 1

              Note that the persistent disk with the home folder,
              the Gardener git repository, the go build cache and
              the local container registry is retained between restarts.

              ${y}The purge this environment, delete both the StatefulSet and the pvc:${n}
                kubectl delete statefulset remote-local-setup-with-jail
                kubectl delete pvc    home-remote-local-setup-with-jail-0
            GREETING_EOF
            )"
            if grep -q server ~/.kube/config 2>/dev/null; then
              echo
              echo -e "$(
             sed 's/^  //' <<GREETING_EOF
              ${y}To connect to the ${c}KinD${y} cluster from your ${c}laptop${y} with kubectl, run:${n}
                kubectl exec remote-local-setup-with-jail-0 -- sh -c 'cat ~/.kube/config' > kubeconfig
                kubectl port-forward remote-local-setup-with-jail-0 $(< ~/.kube/config grep server | awk -F : '{print $4}')
                # in another terminal:
                export KUBECONFIG=\$PWD/kubeconfig
            GREETING_EOF
              )"
            fi
            echo
            if [ ! -f /tmp/ready ]; then
              echo -n "Please wait a few more seconds for the initialization of the remote local setup to complete"
              while [ ! -f /tmp/ready ]; do sleep 1; done
              echo
              echo
            fi
            if [ -f /root/elapsed_until_tmux ]; then
              echo "Initialization time until the tmux session was prepared for developers to use: $(cat /root/elapsed_until_tmux)"
              if [ -f /root/elapsed_until_cell ]; then
                echo "Time elapsed until the cell was prepared for untrusted users to use: $(cat /root/elapsed_until_cell)"
              fi
              echo
            fi
          EOF

          kubectl   completion bash        > /usr/share/bash-completion/completions/kubectl
          gardenctl completion bash        > /usr/share/bash-completion/completions/gardenctl
          ~/go/bin/stern --completion=bash > /usr/share/bash-completion/completions/stern

          sed 's/^  //' <<"EOF" > ~/.bash_profile
            source /etc/bash/bashrc
            source ~/.bashrc
          EOF

          sed 's/^  //' <<"EOF" > ~/.bashrc
            [ -z "$TMUX" ] && export TERM=xterm-256color
            set -o pipefail
            export GOPATH=~/go
            export PATH=$PATH:$GOPATH/bin:~/.krew/bin:~/go/src/github.com/gardener/gardener/hack/usage
            export XDG_CONFIG_HOME=~/.config
            export EDITOR=nvim
            export KUBE_EDITOR=nvim
            export HISTFILESIZE=10000
            export HISTSIZE=10000
            export HISTTIMEFORMAT="%F %T "
            export HISTCONTROL=ignorespace
            export PROMPT_COMMAND='history -a'
            export BAT_THEME="gruvbox-light" # assuming a light terminal theme
            shopt -s histappend
            source /usr/share/bash-completion/completions/kubectl
            source /usr/share/bash-completion/completions/gardenctl
            complete -o default -F __start_kubectl k
            complete -o default -F __start_gardenctl g
            source /usr/local/bin/kube-ps1.sh
            source /usr/share/git-core/git-prompt.sh
            export PS1='[\w $(printf "$(kube_ps1)")] $(__git_ps1 "(%s)") [$(date +%H:%M)]\$ '
            stty -ixon
            [ -n "$GCTL_SESSION_ID" ] || [ -n "$TERM_SESSION_ID" ] || export GCTL_SESSION_ID=$(uuidgen)
            cd ~/go/src/github.com/gardener/gardener
            function flag_notify {
              touch sync/$1
            }
            function flag_wait {
              [ -f sync/$1 ] || inotifywait -qq sync --include /$1$
            }
            function flag_delete {
              rm sync/$1
            }
            function is_tmux_window_shown {
              if [ $(tmux display-message -p -t $TMUX_PANE '#{window_active_clients}') -eq 0 ]; then
                echo "The tmux window was not shown recently so some commands are skipped..." >&2
                echo "Please wait a bit..." >&2
                return 1
              fi
            }
            function token {
              jq -R '
                split(".")[1] |
                @base64d |
                fromjson |
                (.exp,.iat,.nbf) |= todate'
            }
            function uniq_unbuffered {
              # like uniq --unbuffered, if uniq had an --unbuffered option
              # compare interactively: uniq | cat; uniq_unbuffered | cat
              awk '{if (prev!=$0) print; fflush(); prev=$0}'
            }
            function pr {
              if [ "$#" -ne 1 ]; then
                echo "Usage: pr <id> - checkout the HEAD of PR <id>"
                exit 1
              fi
              git fetch origin pull/$1/head 2>/dev/null
              git checkout FETCH_HEAD
              git tag pr_$1_$(git log --format=%h -1 HEAD) 2>/dev/null
              git log -1 --oneline
            }
            function pr_base {
              if [ "$#" -ne 1 ]; then
                  echo "Usage: pr_base <id> - checkout the BASE of PR <id>"
                  exit 1
              fi
              git fetch origin 2>/dev/null
              git fetch origin pull/$1/head 2>/dev/null
              git checkout $(git merge-base FETCH_HEAD origin/master)
              git tag pr_base_$1_$(git log --format=%h -1 HEAD) 2>/dev/null
              git log -1 --oneline
            }
            # copy the kubeconfig that is created by make kind.*-up to ~/.kube/config
            # the namespace can be set with kns in this copied kubeconfig without affecting the original kubeconfig
            function sync_kubeconfig {
              FOLDER=$1
              while true; do
                if grep -q current-context $FOLDER/kubeconfig 2>/dev/null; then
                  echo "[cp_kubeconfig] Copying $FOLDER/kubeconfig to the default path: ~/.kube/config."
                  cp $FOLDER/kubeconfig ~/.kube/config
                fi
                if ! inotifywait -qq --include kubeconfig -e close_write,delete $FOLDER 2>/dev/null; then
                  echo "[cp_kubeconfig] Waiting for $FOLDER to be created"
                  sleep 1
                fi
              done
            }
          EOF
          sed 's/^  //' <<"EOF" > ~/.tmux.conf
            set -g mouse on
            bind -T copy-mode-vi MouseDown3Pane    send -X copy-selection-and-cancel
            bind -T copy-mode-vi MouseDown2Pane    send -X copy-selection # Command right-click to copy without leaving the copy mode
            bind -T copy-mode-vi MouseDragEnd1Pane send -X select-pane
            set -g mode-keys vi
            set -g default-shell /bin/bash
            set -g pane-border-status top
            set -g pane-border-format " #{pane_index} #{pane_title} - #{pane_current_command} "
            set -g window-size smallest
            set -g history-limit 100000
            set -g status-left-length 30
          EOF

          mkdir -p ~/go/src/github.com/gardener
          cd ~/go/src/github.com/gardener
          [ -d gardener/.git ] || git clone -q https://github.com/gardener/gardener
          cd gardener
          git fetch
          if [[ $NAMESPACE == "demo*" ]]; then
            git checkout $(git tag | sort -V | tail -n 1)
          elif [[ $NAMESPACE == "test*" ]]; then
            git checkout master
            git reset --hard origin/master
          else
            true # do not change the currently checked out commit
          fi

          nice dockerd-entrypoint.sh 2>&1 | tee ~/.dockerd.log &
          until docker ps >/dev/null 2>&1; do sleep 1; done

          sed 's/^  //' <<"SCRIPT_EOF" > /usr/local/bin/is_tmux_window_shown.sh
            if [ $(tmux display-message -p -t $TMUX_PANE '#{window_active_clients}') -eq 0 ]; then
              echo "The tmux window was not shown recently so some commands are skipped..." >&2
              echo "Please wait a bit..." >&2
              return 1
            fi
          SCRIPT_EOF
          chmod +x /usr/local/bin/is_tmux_window_shown.sh

          sed 's/^  //' <<"SCRIPT_EOF" > /usr/local/bin/tmux_functions.sh
            function wait_for_prompt {
              # wait for the character '#' or '>' to appear in the last non empty line of the tmux pane indicating that the bash prompt is ready
              while ! tmux capture-pane -p | grep -v ^$ | tail -n 1 | grep -E '(\$|#|>)$' >/dev/null; do sleep .3; done
            }

            function wait_for_line {
              # wait for a line to appear in the last non empty line of the tmux pane indicating that the input was echoed back by bash
              while ! tmux capture-pane -p | grep -v ^$ | tail -n 1 | grep -F -- "$1" >/dev/null; do sleep .3; done
            }

            function send_line {
              # tmux send does not send the last character if it's a semicolon. It either needs to be escaped or duplicated.
              if [[ "$1" == *';' ]]; then
                tmux send -- "$1;"
              else
                tmux send -- "$1"
              fi
            }

            function send_commands {
              wait_for_prompt
              IFS= read -r line
              line=$(echo "$line" | sed 's/^  //')
              send_line "$line"
              wait_for_line "$line"
              while IFS= read -r line; do
                line=$(echo "$line" | sed 's/^  //')
                tmux send Enter
                wait_for_prompt
                send_line "$line"
                wait_for_line "$line"
              done
              send_line "$@"
            }

            function new_window {
              tmux new-window -n "$1"
              tmux select-pane -T "$2"
              shift; shift
              send_commands "$@"
            }

            function new_pane {
              tmux split-window
              tmux select-pane -T "$1"
              tmux select-layout even-vertical
              shift
              send_commands "$@"
            }

            function new_horizontal_pane {
              tmux split-window -h
              tmux select-pane -T "$1"
              shift
              send_commands "$@"
            }
          SCRIPT_EOF

          mkdir -p cell
          cd cell
          if [ -d gardener/.git ]; then
            cd gardener
            git fetch origin HEAD --tags
            git checkout FETCH_HEAD
            cd -
          else
            git clone ~/go/src/github.com/gardener/gardener gardener
          fi
          mkdir -p scripts
          cp /usr/local/bin/tmux_functions.sh scripts

          sed 's/^  //' <<DOCKERFILE > ~/go/src/github.com/gardener/gardener/cell/Dockerfile
            FROM alpine:3.20
            RUN apk add bash bash-completion bat bind-tools brotli conntrack-tools coreutils curl       \\
                        diffutils docker-bash-completion findutils fzf gawk gcompat git git-prompt grep \\
                        helm inotify-tools jq k9s less lsof make mandoc mc moreutils mount ncurses      \\
                        neovim openssl parallel procps sed sysstat tar tcpdump tmux tmux-doc tzdata     \\
                        util-linux vim wget yq
            RUN echo golang                                                                                                  && \\
                     VERSION=$(curl -sL https://golang.org/VERSION?m=text | awk 'NR==1{print}')                              && \\
                     wget "https://go.dev/dl/\$VERSION.linux-amd64.tar.gz"                                                   && \\
                     tar -C /usr/local -xzf "\$VERSION.linux-amd64.tar.gz"                                                   && \\
                     ln -s /usr/local/go/bin/go /usr/local/bin/go                                                            && \\
                     ln -s /usr/local/go/bin/gofmt /usr/local/bin/gofmt
            RUN echo gardenlogin                                                                                             && \\
                     VERSION=$(curl -sL https://raw.githubusercontent.com/gardener/gardenlogin/master/LATEST)                && \\
                     wget "https://github.com/gardener/gardenlogin/releases/download/\$VERSION/gardenlogin_linux_amd64"      && \\
                     mv gardenlogin_linux_amd64 /usr/local/bin/gardenlogin                                                   && \\
                     chmod +x /usr/local/bin/gardenlogin                                                                     && \\
                     ln -s "\$(which gardenlogin)" /usr/local/bin/kubectl-gardenlogin
            RUN echo gardenctl                                                                                               && \\
                     VERSION=$(curl -sL https://raw.githubusercontent.com/gardener/gardenctl-v2/master/LATEST)               && \\
                     wget "https://github.com/gardener/gardenctl-v2/releases/download/\$VERSION/gardenctl_v2_linux_amd64"    && \\
                     mv gardenctl_v2_linux_amd64 /usr/local/bin/gardenctl                                                    && \\
                     chmod +x /usr/local/bin/gardenctl                                                                       && \\
                     ln -s "\$(which gardenctl)" /usr/local/bin/g
            RUN echo kns                                                                                                     && \\
                     wget "https://raw.githubusercontent.com/blendle/kns/master/bin/kns"                                     && \\
                     mv kns /usr/local/bin/kns                                                                               && \\
                     chmod +x /usr/local/bin/kns
            RUN echo krew                                                                                                    && \\
                     VERSION=$(curl -sL https://api.github.com/repos/kubernetes-sigs/krew/releases/latest | jq .tag_name -r) && \\
                     wget "https://github.com/kubernetes-sigs/krew/releases/download/\$VERSION/krew-linux_amd64.tar.gz"      && \\
                     tar -xzf krew-linux_amd64.tar.gz ./krew-linux_amd64                                                     && \\
                     mv krew-linux_amd64 /usr/local/bin/krew                                                                 && \\
                     krew install krew
            RUN echo ktx                                                                                                     && \\
                     wget "https://raw.githubusercontent.com/blendle/kns/master/bin/ktx"                                     && \\
                     mv ktx /usr/local/bin/ktx                                                                               && \\
                     chmod +x /usr/local/bin/ktx
            RUN echo kube-ps1                                                                                                && \\
                     wget "https://raw.githubusercontent.com/jonmosco/kube-ps1/master/kube-ps1.sh"                           && \\
                     mv kube-ps1.sh /usr/local/bin/kube-ps1.sh
            RUN echo kubectl                                                                                                 && \\
                     VERSION=$(curl -sL https://dl.k8s.io/release/stable.txt)                                                && \\
                     wget "https://dl.k8s.io/release/\$VERSION/bin/linux/amd64/kubectl"                                      && \\
                     mv kubectl /usr/local/bin/kubectl                                                                       && \\
                     chmod +x /usr/local/bin/kubectl                                                                         && \\
                     ln -s "\$(which kubectl)" /usr/local/bin/k
            RUN echo tmux-completion                                                                                         && \\
                     wget "https://raw.githubusercontent.com/imomaliev/tmux-bash-completion/master/completions/tmux"         && \\
                     mv tmux /usr/share/bash-completion/completions/tmux
            RUN echo yaml2json                                                                                               && \\
                     VERSION=$(curl -sL https://api.github.com/repos/bronze1man/yaml2json/releases/latest | jq .tag_name -r) && \\
                     wget "https://github.com/bronze1man/yaml2json/releases/download/\$VERSION/yaml2json_linux_amd64"        && \\
                     mv yaml2json_linux_amd64 /usr/local/bin/yaml2json                                                       && \\
                     chmod +x /usr/local/bin/yaml2json


            RUN adduser --disabled-password --gecos '' demo
            USER demo

            RUN echo gron                                                                                                    && \\
                     go install github.com/tomnomnom/gron@latest
            RUN echo ginkgo                                                                                                  && \\
                     go install github.com/onsi/ginkgo/v2/ginkgo@latest
            RUN echo stern                                                                                                   && \\
                     go install github.com/stern/stern@latest
            RUN echo neat                                                                                                    && \\
                     krew install neat
            RUN echo node-shell                                                                                              && \\
                     krew install node-shell
          DOCKERFILE

          sed 's/^  //' <<"DOCKERFILE" >> ~/go/src/github.com/gardener/gardener/cell/Dockerfile
            USER root
            RUN kubectl   completion bash                 > /usr/share/bash-completion/completions/kubectl
            RUN gardenctl completion bash                 > /usr/share/bash-completion/completions/gardenctl
            RUN /home/demo/go/bin/stern --completion=bash > /usr/share/bash-completion/completions/stern
            USER demo

            RUN sed 's/^  //' <<"EOF" > ~/.bash_profile
              source /etc/bash/bashrc
              source ~/.bashrc
            EOF

            RUN sed 's/^  //' <<"EOF" > ~/.bashrc
              [ -z "$TMUX" ] && export TERM=xterm-256color
              set -o pipefail
              export GOPATH=~/go
              export PATH=$PATH:$GOPATH/bin:~/.krew/bin:~/go/src/github.com/gardener/gardener/hack/usage
              export XDG_CONFIG_HOME=~/.config
              export EDITOR=nvim
              export KUBE_EDITOR=nvim
              export HISTFILESIZE=10000
              export HISTSIZE=10000
              export HISTTIMEFORMAT="%F %T "
              export HISTCONTROL=ignorespace
              export PROMPT_COMMAND='history -a'
              export BAT_THEME="gruvbox-light" # assuming a light terminal theme
              export KUBECTL_NODE_SHELL_IMAGE=localhost:5001/alpine:latest
              shopt -s histappend
              source /usr/share/bash-completion/completions/kubectl
              source /usr/share/bash-completion/completions/gardenctl
              complete -o default -F __start_kubectl k
              complete -o default -F __start_gardenctl g
              source /usr/local/bin/kube-ps1.sh
              source /usr/share/git-core/git-prompt.sh
              export PS1='[\w $(printf "$(kube_ps1)")] $(__git_ps1 "(%s)")\n\$ '
              stty -ixon
              [ -n "$GCTL_SESSION_ID" ] || [ -n "$TERM_SESSION_ID" ] || export GCTL_SESSION_ID=$(uuidgen)
              cd ~/go/src/github.com/gardener/gardener
              function uniq_unbuffered {
                # like uniq --unbuffered, if uniq had an --unbuffered option
                # compare interactively: uniq | cat; uniq_unbuffered | cat
                awk '{if (prev!=$0) print; fflush(); prev=$0}'
              }
              function token {
                jq -R '
                  split(".")[1] |
                  @base64d |
                  fromjson |
                  (.exp,.iat,.nbf) |= todate'
              }
            EOF

            RUN sed 's/^  //' <<"EOF" > ~/.tmux.conf
              set -g mouse on
              bind -T copy-mode-vi MouseDown3Pane send -X copy-selection-and-cancel
              bind -T copy-mode-vi MouseDown2Pane send -X copy-selection # Command right-click to copy without leaving the copy mode
              bind -T copy-mode-vi MouseDragEnd1Pane send -X select-pane
              set -g mode-keys vi
              set -g default-shell /bin/bash
              set -g pane-border-status top
              set -g pane-border-format " #{pane_index} #{pane_title} - #{pane_current_command} "
              set -g history-limit 100000
              set -g status-left-length 30
            EOF

            RUN sed 's/^  //' <<"EOF" > ~/greeting.sh
              [ -n "$TMUX" ] && exit
              export LANG=C.UTF-8
              export TERM=xterm-256color
              echo "Welcome to the Gardener Demo!"
            EOF
            ENV ENV=/home/demo/greeting.sh

            RUN mkdir -p ~/go/src/github.com/gardener/gardener

            ADD scripts/tmux_functions.sh /usr/local/bin/tmux_functions.sh

            RUN sed 's/^  //' <<"EOF" > ~/welcome.md
              # Welcome to the Gardener Demo environment

              This is a demo environment for the [Gardener][] project that
              allows you to explore the features and capabilities of Gardener
              interactively.

              Gardener is an open source project contributed by SAP and others
              that provides a Kubernetes-based solution to manage Kubernetes
              clusters on various cloud providers in a uniform way.

              Please follow the step by step instructions on the side to explore
              the features of Gardener interactively.

              [Gardener]: https://gardener.cloud/
            EOF

            RUN sed 's/^  //' <<"EOF" > ~/demo.md
              # Welcome to the Gardener Demo environment

              This is a demo environment for the Gardener (https://gardener.cloud/) project
              that allows you to explore the features and capabilities of Gardener
              interactively.

              Gardener is an open source project contributed by SAP and others that provides a
              Kubernetes-based solution to manage Kubernetes clusters on various cloud
              providers in a uniform way.

              This demo environment is based on KinD (Kubernetes in Docker): a KinD cluster
              acts as the "runtime Garden" cluster where the Gardener operator manages the so
              called "virtual Garden" cluster, the Gardener API.

              The Gardener API is itself a Kubernetes API with various custom resources like
              Shoots and Seeds. End users can create Shoots (Kubernetes clusters): the control
              plane is then managed by Gardener on a Seed cluster. The worker nodes of the
              Shoot cluster are created in the IaaS account that is configured by the end
              user: in this local setup that has no IaaS dependencies, the worker nodes are
              simulated by pods in the control plane of the shoot cluster.

              As said above, the KinD cluster is the runtime Garden cluster and it also acts
              as a Seed cluster. This might be slightly confusing because in real
              installations these roles are separated into dedicated clusters.

              Gardener managed shoots can be also upgraded to a seed cluster, such that they
              can host shoot control planes. This allows for a recursive setup where a top
              level, non Gardener managed seed cluster (the soil cluster) manages a small set
              of shoots that are distributed across multiple IaaS providers and geographical
              regions. These Gardener managed shoots are then registered as seeds and the end
              user created shoots' control planes are hosted on them, close to the IaaS and
              region that is chosen by the end user.

              ## The demo environment

              This demo environment contains a much more limited, but still fully functional
              setup that allows you to explore the features of Gardener interactively. It is
              based on the [local setup][] that you could also deploy on your own machine. It
              is slightly restricted compared to the regular local setup (e.g. no Internet
              access) to avoid abusing this free environment that is provided to reduce the
              entry barrier for developers who would like to explore Gardener without
              installing it on their own machine.

              The demo environment is prepared in a tmux session. You can use the mouse to
              select panes and windows. Please check the [tmux][] documentation for more
              keyboard shortcuts, like `CTRL+b c` to create a new window for interactive
              exploration.

              The demo environment does not have Internet access, but you can use a local
              container registry to pull the alpine and nginx images as
              `localhost:5001/alpine:latest` and `localhost:5001/nginx:latest`.

              [tmux]: https://github.com/tmux/tmux/wiki
              [local setup]: https://github.com/gardener/gardener/blob/master
                             /docs/deployment/getting_started_locally.md#
                             alternative-way-to-set-up-garden-and-seed-leveraging-gardener-operator-complete
            EOF

            RUN sed 's/^  //' <<"SCRIPT_EOF" > ~/prepare-cell.sh
              set -x
              source /usr/local/bin/tmux_functions.sh
              tmux new -d -s gardener-demo -n demo -x 2000 -y 2000
              tmux select-pane -T demo;
              send_commands <<"EOF"
                cat ~/welcome.md
                k apply -f example/provider-local/shoot.yaml # Create your first shoot, a Kubernetes cluster managed by Gardener
              EOF

              tmux new -d -s advanced -n demo -x 2000 -y 2000
              tmux select-pane -T demo;
              send_commands Enter <<"EOF"
                less ~/demo.md
              EOF

              ##### Prepare the panes for the demo scenario here #####

              new_window "garden" "garden" Enter <<"EOF"
                export KUBECONFIG=~/.kube_readonly/config
                nice watch k get garden
              EOF
              new_pane "last operations" Enter <<"EOF"
                export KUBECONFIG=~/.kube_readonly/config
                while true; do k get garden local -o json -w 2>/dev/null \
                  | jq -r --unbuffered '.status.lastOperation |
                                        [.progress, .description] |
                                        join(" ")
                    ' | uniq_unbuffered \
                  | sed --unbuffered 's/, /,\n+ /g' | ts
                  sleep 1
                done
              EOF
              new_pane "garden conditions" Enter <<"EOF"
                export KUBECONFIG=~/.kube_readonly/config
                while true; do
                  k get garden -o json | jq '
                    [.items[] |
                    { name: .metadata.name,
                      conditions: .status.conditions | map(del(.lastTransitionTime, .lastUpdateTime))}]
                  ' | yq -P -C | grep --color=Always -E '"False"| Unknown| Progressing|$' | nl
                  sleep 10s
                  clear
                done
              EOF

              new_window "seed&shoots" "seed&shoots" Enter <<"EOF"
                export KUBECONFIG=$PWD/example/operator/virtual-garden/kubeconfig
                nice watch k get -A seeds,managedseeds,shoots
              EOF
              new_pane "last operations seed" Enter <<"EOF"
                export KUBECONFIG=$PWD/example/operator/virtual-garden/kubeconfig
                while true; do
                  k get seed -o json -w 2>/dev/null \
                  | jq -r --unbuffered '[ "[seed=\(.metadata.name)]",
                                          (.status.lastOperation |
                                          [.progress, .description] |
                                          join(" "))
                                        ] | join(" ")
                    ' | uniq_unbuffered | sed --unbuffered 's/, /,\n+ /g' | ts
                  sleep 1
                done
              EOF
              new_pane "last operations shoot" Enter <<"EOF"
                export KUBECONFIG=$PWD/example/operator/virtual-garden/kubeconfig
                while true; do
                  k get shoot -A -o json -w 2>/dev/null  \
                  | jq -r --unbuffered '[ "[shoot=\(.metadata.namespace)/\(.metadata.name)]",
                                          (.status.lastOperation |
                                          [.progress, .description] |
                                          join(" "))
                                        ] | join(" ")
                    ' | uniq_unbuffered | sed --unbuffered 's/, /,\n+ /g' | ts
                  sleep 1
                done
              EOF
              new_pane "seed conditions" Enter <<"EOF"
                export KUBECONFIG=$PWD/example/operator/virtual-garden/kubeconfig
                while true; do
                  k get seeds -o json | jq '
                    [.items[] |
                    { name: .metadata.name,
                      conditions: .status.conditions | map(del(.lastTransitionTime, .lastUpdateTime))}]
                  ' | yq -P -C | grep --color=Always -E '"False"| Unknown| Progressing|$' | nl
                  sleep 10s
                  clear
                done
              EOF
              new_horizontal_pane "shoot conditions" Enter <<"EOF"
                export KUBECONFIG=$PWD/example/operator/virtual-garden/kubeconfig
                while true; do
                  k get shoots -A -o json | jq '
                    [.items[] |
                    { name: [.metadata.namespace, .metadata.name] | join("/"),
                      conditions: .status.conditions | map(del(.lastTransitionTime, .lastUpdateTime))}]
                  ' | yq -P -C | grep --color=Always -E '"False"| Unknown| Progressing|$' | nl
                  sleep 10s
                  clear
                done
              EOF

              new_window "shoot lifecycle" "Create" <<"EOF"
                export KUBECONFIG=$PWD/example/operator/virtual-garden/kubeconfig
                k apply -f <(yq '.spec.controlPlane.highAvailability.failureTolerance.type="zone"' example/provider-local/shoot.yaml)
              EOF
              new_pane "Reconcile" <<"EOF"
                export KUBECONFIG=$PWD/example/operator/virtual-garden/kubeconfig
                k annotate shoot local -n garden-local 'gardener.cloud/operation=reconcile'
              EOF
              new_pane "Delete" <<"EOF"
                export KUBECONFIG=$PWD/example/operator/virtual-garden/kubeconfig
                k annotate shoot local -n garden-local 'confirmation.gardener.cloud/deletion=true' && k delete shoot local -n garden-local
              EOF

              new_window "runtime&seed pods" "pods" Enter <<"EOF"
                export KUBECONFIG=~/.kube_readonly/config
                # the while loop is used instead of watch to allow for scrolling a longer list in the tmux pane
                while true; do clear; k get pods -A -o wide | nl; sleep 10s; done
              EOF

              new_window "gardenctl" "gardenctl" <<"EOF"
                gardenctl config set-garden local --kubeconfig $PWD/example/operator/virtual-garden/kubeconfig
                eval $(gardenctl kubectl-env bash)
                g target --garden local --shoot local
              EOF
              new_window "ad-hoc" "ad-hoc" Enter <<"EOF"
                # Use this pane for ad-hoc commands
              EOF

              #### Misc ####

              new_window "k9s" "k9s" <<"EOF"
                export KUBECONFIG=~/.kube_readonly/config
                nice k9s
              EOF

              mkdir -p ~/.config/procps; rm -f ~/.config/procps/toprc
              new_window "misc" "top" Enter <<"EOF"
                top
              EOF
              new_pane "sar" Enter <<"EOF"
                while true; do sar -B -q LOAD -r -u -w -h 60 60; sleep 1m; done
              EOF
              sleep 1
              for k in z C c t t m m V s 5 Enter E e W; do sleep .2; tmux send $k; done

              new_pane "demo CPU limit" <<"EOF"
                nice dd if=/dev/zero of=/dev/null
              EOF

              new_pane "disk" Enter <<"EOF"
                df -h
              EOF
              new_pane "findmnt" Enter <<"EOF"
                findmnt
              EOF

              tmux select-window -t 0
              tmux select-pane -t 1

              echo "The tmux session is prepared. To attach to it, run 'tmux a'."
              while [ ! -f /tmp/cell-tested ]; do sleep 1; done
              touch /tmp/ready
              sleep inf & # do not self destroy
              wait
            SCRIPT_EOF

            RUN chmod +x ~/prepare-cell.sh

            COPY --chown=demo:demo gardener /home/demo/go/src/github.com/gardener/gardener
          DOCKERFILE

          cd -

          mkdir -p ~/.kube/readonly
          sed 's/^  //' <<"EOF" > ~/.kube/readonly/resources.yaml
            apiVersion: v1
            kind: ServiceAccount
            metadata:
              name: readonly
              namespace: default
            ---
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRole
            metadata:
              name: readonly
            rules:
            - apiGroups: ["*"]
              resources: ["*"]
              verbs: ["get", "list", "watch"]
            ---
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRoleBinding
            metadata:
              name: readonly
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: ClusterRole
              name: readonly
            subjects:
            - kind: ServiceAccount
              name: readonly
              namespace: default
          EOF

          sed 's/^  //' <<"SCRIPT_EOF" > /usr/local/bin/prepare-operator-complete.sh
            tmux kill-session 2>/dev/null || true
            cd ~/go/src/github.com/gardener/gardener
            rm -rf sync && mkdir -p sync
            cd - >/dev/null
            mkdir -p ~/.kube
            echo '{"current-context": "kind-gardener-operator-local"}' > ~/.kube/config
            source /usr/local/bin/tmux_functions.sh
            tmux new -d -s operator-complete -n stats -x 2000 -y 2000
            tmux select-pane -T top; mkdir -p ~/.config/procps; rm -f ~/.config/procps/toprc
            for k in top Enter z C c i t t m m V s 5 Enter E e W; do sleep .2; tmux send $k; done
            new_pane "sar" Enter <<"EOF"
              while true; do sar -B -q LOAD -r -u -w -h 60 60; sleep 1m; done
            EOF
            new_horizontal_pane "man" Enter <<"EOF"
              man sar | sed -n '
                1,5p; 98,141p; 1294,1298p; 1360,1386p; 1437,1512p; 1552,1602p; 1629,1636p;
              ' | grep --color=Always -P '^              (?!following|that|values|are)[a-z%][^ ]*|$'
            EOF
            new_window "make" "make kind-operator-up" Enter <<"EOF"
              sync_kubeconfig example/gardener-local/kind/operator & sleep 1
              nice time make kind-operator-down kind-operator-up &&
              flag_notify kind-operator-up
            EOF
            new_pane "wait for the KinD cluster" Enter <<"EOF"
              flag_wait kind-operator-up &&
              time ( kubectl wait --for=jsonpath='{.status.numberReady}'=3 daemonset -A --all --timeout=-1s &
                     kubectl wait --for=condition=available deployments -A --all --timeout=-1s &
                     wait ) &&
              flag_notify kind-operator-up-ready
            EOF
            new_pane "make operator-up" Enter <<"EOF"
              export KUBECONFIG=$PWD/example/gardener-local/kind/operator/kubeconfig
              flag_wait kind-operator-up-ready &&
              nice time make operator-up &&
              flag_notify operator-up
            EOF
            new_pane "make operator-seed-up" Enter <<"EOF"
              export KUBECONFIG=$PWD/example/gardener-local/kind/operator/kubeconfig
              flag_wait operator-up &&
              nice time make operator-seed-up &&
              flag_notify operator-seed-up
            EOF
            new_pane "make the virtual cluster HA " Enter <<"EOF"
              flag_wait operator-seed-up &&
              k get garden local -o json | jq '
                .spec.virtualCluster.controlPlane.highAvailability = {}
              ' | k apply -f - &&
              time ( kubectl wait --for=jsonpath='{.status.lastOperation.state}'=Processing garden local --timeout=-1s &&
                     kubectl wait --for=jsonpath='{.status.lastOperation.state}'=Succeeded garden local --timeout=-1s ) &&
              flag_notify virtual-garden-ha
            EOF
            new_window "garden" "garden" Enter <<"EOF"
              watch -n 10 is_tmux_window_shown.sh "&&" k get garden
            EOF
            new_pane "last operations" Enter <<"EOF"
              flag_wait operator-up &&
              while true; do k get garden local -o json -w 2>/dev/null \
                | jq -r --unbuffered '.status.lastOperation |
                                      [.progress, .description] |
                                      join(" ")
                  ' | uniq_unbuffered \
                | sed --unbuffered 's/, /,\n+ /g' | ts
                sleep 10s
              done
            EOF
            new_pane "Reconcile" <<"EOF"
              k annotate garden local 'gardener.cloud/operation=reconcile'
            EOF
            new_pane "garden conditions" Enter <<"EOF"
              while true; do
                clear
                is_tmux_window_shown &&
                k get garden -o json | jq '
                  [.items[] |
                   { name: .metadata.name,
                     conditions: .status.conditions | map(del(.lastTransitionTime, .lastUpdateTime))}]
                ' | yq -P -C | grep --color=Always -E '"False"| Unknown| Progressing|$' | nl
                sleep 10s
              done
            EOF
            new_window "shoot lifecycle" "Create" Enter <<"EOF"
              export KUBECONFIG=$PWD/example/operator/virtual-garden/kubeconfig
              time flag_wait virtual-garden-ha &&
              k apply -f example/provider-local/shoot.yaml &&
              time k -n garden-local wait shoot local --for=condition=SystemComponentsHealthy --timeout=-1s &&
              flag_notify shoot-ready
            EOF
            new_pane "HA" Enter <<"EOF"
              export KUBECONFIG=$PWD/example/operator/virtual-garden/kubeconfig
              time flag_wait shoot-ready &&
              k apply -f <(yq '.spec.controlPlane.highAvailability.failureTolerance.type="zone"' example/provider-local/shoot.yaml) &&
              time k -n garden-local wait shoot local --for=condition=SystemComponentsHealthy --timeout=-1s &&
              flag_notify shoot-ha-ready
            EOF
            new_pane "Reconcile" <<"EOF"
              export KUBECONFIG=$PWD/example/operator/virtual-garden/kubeconfig
              k annotate shoot local -n garden-local 'gardener.cloud/operation=reconcile'
            EOF
            new_pane "Delete" Enter <<"EOF"
              export KUBECONFIG=$PWD/example/operator/virtual-garden/kubeconfig
              time flag_wait shoot-ha-ready &&
              k annotate shoot local -n garden-local 'confirmation.gardener.cloud/deletion=true' &&
              k delete shoot local -n garden-local &&
              flag_notify shoot-ha-ready-deleted
            EOF
            new_window "seed&shoots" "seed&shoots" Enter <<"EOF"
              export KUBECONFIG=$PWD/example/operator/virtual-garden/kubeconfig
              watch -n 10 is_tmux_window_shown.sh "&&" k get -A seeds,managedseeds,shoots
            EOF
            new_pane "last operations seed" Enter <<"EOF"
              export KUBECONFIG=$PWD/example/operator/virtual-garden/kubeconfig
              flag_wait operator-seed-up &&
              while true; do
                k get seed -o json -w 2>/dev/null \
                | jq -r --unbuffered '[ "[seed=\(.metadata.name)]",
                                        (.status.lastOperation |
                                         [.progress, .description] |
                                         join(" "))
                                      ] | join(" ")
                  ' | uniq_unbuffered | sed --unbuffered 's/, /,\n+ /g' | ts
                sleep 10s
              done
            EOF
            new_pane "last operations shoot" Enter <<"EOF"
              export KUBECONFIG=$PWD/example/operator/virtual-garden/kubeconfig
              flag_wait operator-seed-up &&
              while true; do
                k get shoot -A -o json -w 2>/dev/null  \
                | jq -r --unbuffered '[ "[shoot=\(.metadata.namespace)/\(.metadata.name)]",
                                        (.status.lastOperation |
                                         [.progress, .description] |
                                         join(" "))
                                      ] | join(" ")
                  ' | uniq_unbuffered | sed --unbuffered 's/, /,\n+ /g' | ts
                sleep 10s
              done
            EOF
            new_pane "seed conditions" Enter <<"EOF"
              export KUBECONFIG=$PWD/example/operator/virtual-garden/kubeconfig
              while true; do
                clear
                is_tmux_window_shown &&
                k get seeds -o json | jq '
                  [.items[] |
                   { name: .metadata.name,
                     conditions: .status.conditions | map(del(.lastTransitionTime, .lastUpdateTime))}]
                ' | yq -P -C | grep --color=Always -E '"False"| Unknown| Progressing|$' | nl
                sleep 10s
              done
            EOF
            new_horizontal_pane "shoot conditions" Enter <<"EOF"
              export KUBECONFIG=$PWD/example/operator/virtual-garden/kubeconfig
              while true; do
                clear
                is_tmux_window_shown &&
                k get shoots -A -o json | jq '
                  [.items[] |
                   { name: [.metadata.namespace, .metadata.name] | join("/"),
                     conditions: .status.conditions | map(del(.lastTransitionTime, .lastUpdateTime))}]
                ' | yq -P -C | grep --color=Always -E '"False"| Unknown| Progressing|$' | nl
                sleep 10s
              done
            EOF
            new_window "managed seed" "create shoot" Enter <<"EOF"
              export KUBECONFIG=$PWD/example/operator/virtual-garden/kubeconfig
              time flag_wait virtual-garden-ha &&
              k apply -f <(yq '.spec.controlPlane.highAvailability.failureTolerance.type="zone"' example/provider-local/managedseeds/shoot-managedseed.yaml) &&
              time k -n garden wait shoot managedseed --for=condition=SystemComponentsHealthy --timeout=-1s &&
              flag_notify managedseed-shoot-ready
            EOF
            new_pane "create managed seed" Enter <<"EOF"
              export KUBECONFIG=$PWD/example/operator/virtual-garden/kubeconfig
              time flag_wait managedseed-shoot-ready &&
              k apply -f example/provider-local/managedseeds/managedseed.yaml &&
              time ( k wait -n garden managedseed managedseed --for=condition=SeedRegistered --timeout=-1s &&
                     until k wait seed managedseed --for=condition=SeedSystemComponentsHealthy --timeout=-1s 2>/dev/null; do sleep 1; done ) &&
              flag_notify managedseed-seed-ready
            EOF
            new_pane "managed seed pods" Enter <<"EOF"
              export KUBECONFIG=$PWD/example/operator/virtual-garden/kubeconfig
              time flag_wait managedseed-seed-ready &&
              while true; do
                if is_tmux_window_shown; then
                  bash -o pipefail generate-admin-kubeconf.sh --namespace garden --shoot-name managedseed > /tmp/managedseed.kubeconfig &&
                  clear &&
                  while is_tmux_window_shown &&
                        k --kubeconfig /tmp/managedseed.kubeconfig get pods -A -o wide | nl; do
                          sleep 10s
                          clear
                  done
                fi
                sleep 10s
              done
            EOF
            new_pane "workerless shoot on managed seed" Enter <<"EOF"
              # Note: regular shoots do not work due to nesting overlayfs, see errors in dmesg
              # Note: the managed seed has 1 node and no zones, so it is not HA
              export KUBECONFIG=$PWD/example/operator/virtual-garden/kubeconfig
              time flag_wait managedseed-seed-ready &&
              k apply -f <(yq '.metadata.name="local-wl-ms" |
                               .spec.seedName="managedseed" |
                               .spec.networking.services="10.6.0.0/16"' example/provider-local/shoot-workerless.yaml) &&
              time k -n garden-local wait shoot local-wl-ms --for=condition=SystemComponentsHealthy --timeout=-1s &&
              flag_notify managedseed-nested-shoot-ready
            EOF
            new_pane "delete workerless shoot on managed seed" Enter <<"EOF"
              export KUBECONFIG=$PWD/example/operator/virtual-garden/kubeconfig
              time flag_wait managedseed-nested-shoot-ready &&
              k annotate shoot local-wl-ms -n garden-local 'confirmation.gardener.cloud/deletion=true' &&
              k delete shoot local-wl-ms -n garden-local &&
              k wait shoot local-wl-ms -n garden-local --for=delete --timeout=-1s &&
              flag_notify managedseed-nested-shoot-ready-deleted
            EOF
            new_window "runtime&seed pods" "pods" Enter <<"EOF"
              # the while loop is used instead of watch to allow for scrolling a longer list in the tmux pane
              while true; do
                clear
                is_tmux_window_shown &&
                k get pods -A -o wide | nl
                sleep 10s
              done
            EOF
            new_pane "not ready pods" Enter <<"EOF"
              watch -n 10 "
                is_tmux_window_shown.sh &&
                k get pods -A -o wide | awk '
                  {split(\$3, a, \"/\")
                   if (a[1]!=a[2] || \$4 != \"Running\") {
                     print}}'"
            EOF
            new_window "shoot pods" "pods" Enter <<"EOF"
              export KUBECONFIG=$PWD/example/operator/virtual-garden/kubeconfig
              flag_wait shoot-ready &&
              while true; do
                is_tmux_window_shown &&
                bash -o pipefail generate-admin-kubeconf.sh > /tmp/shoot.kubeconfig &&
                yes | watch -e -n 10 is_tmux_window_shown.sh "&&" k --kubeconfig /tmp/shoot.kubeconfig get pods -A
                sleep 10s
              done
            EOF
            new_pane "not ready pods" Enter <<"EOF"
              export KUBECONFIG=$PWD/example/operator/virtual-garden/kubeconfig
              flag_wait shoot-ready &&
              while true; do
                is_tmux_window_shown &&
                bash -o pipefail generate-admin-kubeconf.sh > /tmp/shoot.kubeconfig2 &&
                yes | watch -e -n 10 "
                        is_tmux_window_shown.sh &&
                        k --kubeconfig /tmp/shoot.kubeconfig2 get pods -A -o wide \
                        | awk '
                            {split(\$3, a, \"/\")
                             if (a[1]!=a[2] || \$4 != \"Running\") {
                               print}}'"
                sleep 10s
              done
            EOF
            new_window "gardenctl" "gardenctl" <<"EOF"
              gardenctl config set-garden local --kubeconfig $PWD/example/operator/virtual-garden/kubeconfig
              eval $(gardenctl kubectl-env bash)
              g target --garden local --shoot local
            EOF
            new_window "git" "git" Enter <<"EOF"
              # Use 'pr' or 'pr_base' to checkout the head or base commit of a PR
              git log --oneline -1
            EOF
            new_window "ad-hoc" "ad-hoc" Enter <<"EOF"
              # Use this pane for ad-hoc commands
            EOF

            new_window "image preload" "image preload" Enter <<"EOF"
              flag_wait operator-up &&
              for i in alpine:latest nginx:latest; do
                docker pull $i
                docker tag $i localhost:5001/$i
                docker push localhost:5001/$i
              done
            EOF

            new_window "offline" "offline" Enter <<"EOF"
              flag_wait shoot-ha-ready-deleted && # managedseed-nested-shoot-ready-deleted once the workerless shoot bug is fixed
              DEVICE=$(ip -o link show | awk -F': ' '{print $2}' | grep br-) &&
              for i in docker0 $DEVICE; do
                iptables  -I FORWARD -i $i -o eth0 -j REJECT -p tcp --reject-with tcp-reset
                iptables  -I FORWARD -i $i -o eth0 -j REJECT -p udp --reject-with icmp-port-unreachable
                ip6tables -I FORWARD -i $i -o eth0 -j REJECT -p tcp --reject-with tcp-reset
                ip6tables -I FORWARD -i $i -o eth0 -j REJECT -p udp --reject-with icmp6-port-unreachable
              done &&
              flag_notify offline
            EOF
            new_pane "online" <<"EOF"
              DEVICE=$(ip -o link show | awk -F': ' '{print $2}' | grep br-) &&
              for i in docker0 $DEVICE; do
                iptables  -D FORWARD -i $i -o eth0 -j REJECT -p tcp --reject-with tcp-reset
                iptables  -D FORWARD -i $i -o eth0 -j REJECT -p udp --reject-with icmp-port-unreachable
                ip6tables -D FORWARD -i $i -o eth0 -j REJECT -p tcp --reject-with tcp-reset
                ip6tables -D FORWARD -i $i -o eth0 -j REJECT -p udp --reject-with icmp6-port-unreachable
              done
            EOF

            new_window "virtual garden" "virtual garden" Enter <<"EOF"
              cat <<DOC >/dev/null
                The virtual garden cluster's kubeconfig: 'example/operator/virtual-garden/kubeconfig'
                uses the endpoint: 'api.virtual-garden.local.gardener.cloud'
                that is mapped to '172.18.255.3', an arbitrary IP of the docker network 'kind'.
                  See PR g/g#10019 and 'docker network inspect 'kind'.
                "docker ps | sed 's/,/\n/g'" shows that '172.18.255.3:443' is mapped to the KinD node port 31443,
                which is the node port of the 'virtual-garden-istio-ingress/istio-ingressgateway' service.
                With 'socat', 172.18.255.3:443 is remapped to 172.17.0.1:443, where
                172.17.0.1 is an IP in the default bridge docker network,
                that is going to be reachable from the cell.
              DOC
              flag_wait virtual-garden-ha &&
              echo "starting socat for the virtual Garden cluster" &&
              flag_notify socat_virtual_garden &&
              socat TCP-LISTEN:443,fork,reuseaddr,bind=172.17.0.1 TCP:172.18.255.3:443
            EOF
            new_pane "test via socat" Enter <<"EOF"
              # api.virtual-garden.local.gardener.cloud is reachable via 172.17.0.1
              flag_wait socat_virtual_garden &&
              while ! nc -z 172.17.0.1 443; do sleep 1; done &&
              CACERT=$(yq -o json example/operator/virtual-garden/kubeconfig | jq -r '.clusters[0].cluster."certificate-authority-data" | @base64d') &&
              TOKEN=$(yq -o json example/operator/virtual-garden/kubeconfig | jq -r '.users[0].user.token') &&
              curl -s \
                -H        "Authorization: Bearer $TOKEN" \
                --cacert  <(echo "$CACERT")              \
                --resolve api.virtual-garden.local.gardener.cloud:443:172.17.0.1 \
                 https://api.virtual-garden.local.gardener.cloud/ | head
            EOF
            new_pane "token refresh" Enter <<"EOF"
              flag_wait virtual-garden-ha &&
              while true; do
                echo "Starting to watch the gardener secret"
                kubectl -n garden get secret gardener -w --no-headers | \
                  while read line; do
                    echo "Regenerating the kubeconfig of the virtual garden cluster"
                    kubectl -n garden get secret gardener -o jsonpath={.data.kubeconfig} \
                    | base64 -d > $PWD/example/operator/virtual-garden/kubeconfig
                  done
                echo "The watch was interrupted, restarting in 10s"
                sleep 10s
              done | ts
            EOF

            new_window "shoot API" "IP socat" Enter <<"EOF"
              cat <<DOC >/dev/null
                The KinD cluster acts as the "local" seed.
                The shoot control planes are exposed via one of 4 IPs from the docker kind network that are mapped to the loopback device.
                To mitigate a routing issue and to control the network access from the cell, we map these to another 4 IPs from the docker bridge network,
                that is routeable from the cell.
              DOC
              flag_wait virtual-garden-ha &&
              while read internalIP exposedIP; do
                echo "Exposing $internalIP:443 on $exposedIP:443"
                ip addr add $exposedIP/32 dev lo
                socat TCP-LISTEN:443,fork,reuseaddr,bind=$exposedIP TCP:$internalIP:443 &
              done < <(
                k get svc -A -o json | jq -r '
                  .items[] |
                  select(.metadata | (.namespace | test("^istio-ingress")) and .name=="istio-ingressgateway") |
                  .status.loadBalancer.ingress[0].ip |
                  [., sub("^172.18"; "172.17")] | join(" ")
                ') &&
              sleep 1 &&
              jobs
            EOF
            new_pane "hosts entries watching" Enter <<"EOF"
              flag_wait virtual-garden-ha &&
              rm -f /root/gateways.watch.bookmark &&
              while true; do
                BOOKMARK="resourceVersion=$(cat /root/gateways.watch.bookmark 2>/dev/null)"
                k get --raw "/apis/networking.istio.io/v1beta1/gateways?watch=1&allowWatchBookmarks=true&$BOOKMARK" | jq -r --unbuffered --argjson ingress2IP "$(
                  k get svc -A -o json | jq -r '
                  .items |
                  map(select(.metadata | (.namespace | test("^istio-ingress")) and .name=="istio-ingressgateway") |
                      {(.spec.selector.istio): .status.loadBalancer.ingress[0].ip}) | add'
                )" '
                  if .type == "BOOKMARK"
                  then
                    "BOOKMARK \(.object.metadata.resourceVersion)"
                  else
                    select(.object.metadata.name == "kube-apiserver") |
                    { type: .type,
                      resourceVersion: .object.metadata.resourceVersion,
                      namespace: .object.metadata.namespace,
                      istio: .object.spec.selector.istio} |
                    . +
                    (.namespace | capture("shoot--(?<project>.*)--(?<name>.*)")) +
                    {ip: $ingress2IP[.istio]} |
                    "\(.type) \(.resourceVersion) api.\(.name).\(.project).external.local.gardener.cloud \(.ip | sub("^172.18"; "172.17"))"
                  end
                '
                echo "Restarting the watch" | ts >&2
                sleep 10s
              done | awk -v bookmark=/root/gateways.watch.bookmark \
                         -v entries=/root/hosts.entries '
                         {
                           if ($1 != "ADDED") {
                             pastInitialListing = 1
                           }
                           if (pastInitialListing) {
                             print $2 > bookmark ".wip"
                             close(bookmark ".wip")
                             system(sprintf("mv %s.wip %s", bookmark, bookmark))
                           }
                           if ($1 == "BOOKMARK") {
                             next
                           }
                           if ($1 == "ADDED" || $1 == "MODIFIED") {
                             state[$3] = $4
                           } else if ($1 == "DELETED") {
                             delete state[$3]
                           }
                           print "# local seed" > entries
                           for (domain in state) {
                             print state[domain], domain > entries
                           }
                           close(entries)
                           print "regenerated the hosts.entries file"
                         }' | ts
            EOF

            new_window "managed seed shoot API" "wait for the managed seed" Enter <<"EOF"
              flag_wait virtual-garden-ha &&
              export KUBECONFIG=$PWD/example/operator/virtual-garden/kubeconfig &&
              rm -f /root/seed.watch.bookmark &&
              export -f flag_notify flag_delete &&
              while true; do
                BOOKMARK="resourceVersion=$(cat /root/seed.watch.bookmark 2>/dev/null)"
                k get --raw "/apis/core.gardener.cloud/v1beta1/seeds?watch=1&allowWatchBookmarks=true&$BOOKMARK" | jq -r --unbuffered '
                  if .type == "BOOKMARK"
                  then
                    "BOOKMARK \(.object.metadata.resourceVersion)"
                  else
                    select(.object.metadata.name != "local") |
                    { type: .type,
                      resourceVersion: .object.metadata.resourceVersion,
                      name: .object.metadata.name} |
                    "\(.type) \(.resourceVersion) \(.name)"
                  end
                '
                echo "Restarting the watch" | ts >&2
                sleep 10s
              done | awk -v bookmark=/root/seed.watch.bookmark '
                         {
                           if ($1 != "ADDED") {
                             pastInitialListing = 1
                           }
                           if (pastInitialListing) {
                             print $2 > bookmark ".wip"
                             close(bookmark ".wip")
                             system(sprintf("mv %s.wip %s", bookmark, bookmark))
                           }
                           if ($1 == "BOOKMARK") {
                             next
                           }
                           if ($1 == "ADDED" || $1 == "MODIFIED") {
                             printf("flag_notify shoot_api_managedseed")
                           } else if ($1 == "DELETED") {
                             printf("flag_delete shoot_api_managedseed")
                           }
                         }' | bash
            EOF
            new_pane "WIP - IP socat" Enter <<"EOF"
              # TODO add some port forwards to allow to talk to the API server in the managed seed...
              inotifywait -m sync -e close_write --include shoot_api_managedseed | ts
            EOF

            new_window "kind-readonly" "readonly kubeconfig" Enter <<"EOF"
              # The KinD cluster acts as the runtime garden cluster
              #   that contains the Garden resource and where the gardener operator deploys the virtual garden cluster
              # and also as the local seed cluster.
              # The kubeconfig 'example/gardener-local/kind/operator/kubeconfig' is generated by the 'make kind-operator-up' step
              # and it is copied to '~/.kube/config' by the sync_kubeconfig function for easier access.
              # We extract the SAN: Subject Alternative Name from the KinD cluster certificate and the random TCP server port it uses.
              # We map that to the hard coded :44444 TCP port, and create an adjusted the kubeconfig (server, token) and prepare a host mapping
              # that can be used to access the KinD cluster from the cell in a read only mode.
              # The certificate is issued for the SAN and for some other IPs that we can't use in the cell, so we need to use the SAN from within the cell.
              # TODO: note: with gardenctl target --control-plane, the untrusted user might have full access to the seed. If the offline setup works, that is just fine.
              flag_wait virtual-garden-ha &&
              echo &&
              endpoint=$(yq ~/.kube/config -o json | jq -r '.clusters[0].cluster.server' | sed 's#^https://##') &&
              echo "KinD cluster endpoint: $endpoint" &&
              SAN=$(openssl s_client -connect "$endpoint" </dev/null 2>/dev/null \
                    | openssl x509 -noout -ext subjectAltName \
                    | grep DNS: | sed 's/,/\n/g' | grep DNS: \
                    | awk -F : '{print $2}' \
                    | grep -v -E 'localhost|kubernetes') &&
              echo "KinD cluster certificate SAN: $SAN" &&
              DOCKER_IP=$(ip addr show docker0 | awk '/inet /{print $2}' | cut -d '/' -f 1) &&
              echo "Docker IP: $DOCKER_IP" &&
              kubectl apply -f ~/.kube/readonly/resources.yaml &&
              mkdir -p ~/.kube/readonly/export &&
              yq ~/.kube/config -o json \
              | jq --arg token "$(kubectl -n default create token readonly --duration 672h)" --arg SAN "$SAN" '
                .clusters[0].cluster.server = "https://\($SAN):44444" |
                .users[0].user={token: $token} |
                .contexts[0].context.namespace = "garden"
                ' > ~/.kube/readonly/export/config &&
              echo "The readonly token expires at: $(jq '.users[0].user.token' ~/.kube/readonly/export/config | token | jq -r .exp)" &&
              echo "$DOCKER_IP $SAN" > ~/.kube/readonly/export/hosts.entry &&
              echo "$DOCKER_IP api.virtual-garden.local.gardener.cloud" >> ~/.kube/readonly/export/hosts.entry &&
              echo "starting socat for the KinD cluster" &&
              flag_notify socat &&
              socat TCP-LISTEN:44444,fork,reuseaddr TCP:"$endpoint"
            EOF
            new_pane "test read only permissions" Enter <<"EOF"
              # TODO wait for the port forward
              flag_wait socat &&
              cat ~/.kube/readonly/export/hosts.entry >> /etc/hosts &&
              echo "can-i get pods?" &&
              k --kubeconfig ~/.kube/readonly/export/config auth can-i get pods &&
              echo "can-i create pods?" &&
              k --kubeconfig ~/.kube/readonly/export/config auth can-i create pods
            EOF

            new_window "timing" "timing" Enter <<"EOF"
              while [ ! -f /root/elapsed_until_tmux ]; do sleep 1; done &&
              echo "Elapsed time until the tmux session was setup: $(cat /root/elapsed_until_tmux)" &&
              flag_wait cell-ready &&
              end=$(date +%s) &&
              echo $end > /tmp/end-cell &&
              diff=$(( end - $(cat /root/start) )) &&
              elapsed=$(date -u -d @${diff} +"%T") &&
              echo $elapsed > /root/elapsed_until_cell &&
              echo "Elapsed time until the cell was ready: $elapsed"
            EOF

            new_window "jail" "jail" Enter <<"EOF"
              SIZE=8192 # 8GB
              if [ -f ~/inner.disk ] && [ $(stat -c%s ~/inner.disk) -lt $(( $SIZE * 1024 * 1024 )) ]; then
                rm ~/inner.disk
              fi
              if [ ! -f ~/inner.disk ]; then
                dd if=/dev/zero of=~/inner.disk bs=1M count=$SIZE
                mkfs.ext4 ~/inner.disk
              fi
              mkdir /mnt/inner.disk
              mount ~/inner.disk /mnt/inner.disk
              echo > /root/hosts.entries
              mkdir -p /root/.cache/jail
              docker rm jail
              docker run -d --rm --privileged --name jail \
                    -v /root/.cache/jail:/root/cache \
                    -v /root/hosts.entries:/root/hosts.entries:ro \
                    -v /root/.kube/readonly/export:/root/.kube_readonly:ro \
                    -v /root/go/src/github.com/gardener/gardener/example/operator/virtual-garden:/root/.kube_virtual:ro \
                    -v /mnt/inner.disk:/var/lib/docker \
                    -v /root/go/src/github.com/gardener/gardener/cell:/root/go/src/github.com/gardener/gardener/cell:ro \
                    --entrypoint nice \
                    docker:26-dind \
                    -n -9 dockerd-entrypoint.sh &&
              flag_notify jail
            EOF
            new_pane "create cell image" Enter <<"EOF"
              flag_wait virtual-garden-ha &&
              flag_wait jail &&
              until docker exec jail docker ps >/dev/null 2>&1; do sleep 1; done &&
              time sed 's/^  //' <<"JAIL" | xargs -d '\0' docker exec jail sh -c && flag_notify cell-image
                mkdir -p ~/cache/apk
                [ -e /etc/apk/cache ] || ln -s ~/cache/apk /etc/apk/cache
                apk add findutils
                until docker ps >/dev/null 2>&1; do sleep 1; done
                cd /root/go/src/github.com/gardener/gardener/cell
                echo "Build the cell image"
                until docker build . -t cell-image; do echo "Retrying..."; sleep 1; done
                echo "Clean up the older images"
                docker system prune -f
                echo "Image list and disk usage"
                docker images
                docker system df
              JAIL
            EOF
            new_pane "start the cell image" Enter <<"EOF"
              flag_wait offline &&
              flag_wait cell-image &&
              time sed 's/^  //' <<"JAIL" | xargs -d '\0' docker exec jail sh -c && flag_notify cell
                echo "Start the cell container"
                # https://docs.docker.com/engine/reference/run/#runtime-constraints-on-resources
                docker run -d --rm --name cell \
                          --cpus=1 --memory=2g --pids-limit 1000 \
                          $(sed -E 's/(.*) (.*)/--add-host \2:\1/' /root/.kube_readonly/hosts.entry) \
                          -v /root/hosts.entries:/etc/hosts.entries:ro \
                          -v /root/.kube_readonly:/home/demo/.kube_readonly:ro \
                          -v /root/.kube_virtual:/home/demo/go/src/github.com/gardener/gardener/example/operator/virtual-garden:ro \
                          cell-image \
                          sh -c "/home/demo/prepare-cell.sh > /home/demo/prepare-cell.log 2>&1"
                echo "Cell container:"
                docker ps
              JAIL
            EOF
            new_pane "Add /etc/hosts entries in the cell" Enter <<"EOF"
              flag_wait cell &&
              sed 's/^  //' <<"JAIL" | xargs -d '\0' docker exec jail sh -c
                echo "Starting to add the entries from /root/hosts.entries to /etc/hosts in the cell"
                sed 's/^  //' <<"CELL" | xargs -d '\0' docker exec -u root cell sh -c
                  inotifywait -m -e close_write /etc/hosts.entries 2>&1 \
                  | grep --line-buffered -E 'Watches established.|CLOSE_WRITE' \
                  | while read line; do
                      sed -n '/# Gardener/q;p' /etc/hosts > /etc/hosts.base
                      cat /etc/hosts.base > /etc/hosts
                      echo "# Gardener" >> /etc/hosts
                      cat /etc/hosts.entries >> /etc/hosts
                      sed -n '/# Gardener/,$p' /etc/hosts | ts
                    done
                CELL
              JAIL
            EOF
            new_pane "Merge the garden and the KinD kube configs" Enter <<"EOF"
              flag_wait cell &&
              sed 's/^  //' <<"JAIL" | xargs -d '\0' docker exec jail sh -c |& ts
                echo "Starting to merge the garden and the KinD kube configs"
                sed 's/^  //' <<"CELL" | xargs -d '\0' docker exec -u root cell sh -c
                  mkdir -p /home/demo/.kube
                  inotifywait -m -e close_write /home/demo/go/src/github.com/gardener/gardener/example/operator/virtual-garden --include '/kubeconfig$' \
                  | while read line; do
                      echo "Detected a change in the virtual garden kubeconfig"
                      touch ~/.kubeconfig_changed
                    done & \
                  inotifywait -m -e close_write /home/demo/.kube_readonly --include '/config$' \
                  | while read line; do
                      echo "Detected a change in the runtime+seed (KinD) kubeconfig"
                      touch ~/.kubeconfig_changed
                    done & \
                  inotifywait -m -e close_write ~ --include '/.kubeconfig_changed$' 2>&1 \
                  | grep --line-buffered -E 'Watches established.|CLOSE_WRITE' \
                  | while read line; do
                      echo "Merging the kubeconfigs"
                      jq -s '
                        (.[-1] | pick(.apiVersion, .kind)) +
                        {users:    .[1:] | map(.users)     | add,
                         clusters: .[1:] | map(.clusters)  | add,
                         contexts: map(.contexts | arrays) | add | .[0:2],
                         "current-context": ((.[0]."current-context") ? // "garden")}
                      ' <({ cat /home/demo/.kube/config 2>/dev/null || echo '{}'; } | yq -o json) \
                        <(yq -o json /home/demo/go/src/github.com/gardener/gardener/example/operator/virtual-garden/kubeconfig | jq '
                          .contexts[0].context.namespace = "garden-local"
                        ') \
                        <(yq -o json /home/demo/.kube_readonly/config | jq '
                          .contexts[0].context.namespace = "garden"
                        ') | yq -P \
                      > /home/demo/.kube/config.tmp
                      chown demo /home/demo/.kube/config.tmp
                      mv /home/demo/.kube/config.tmp /home/demo/.kube/config
                    done
                CELL
              JAIL
            EOF

            new_window "cell-test" "cell-test" Enter <<"EOF"
              flag_wait cell &&
              time sed 's/^  //' <<"JAIL" | xargs -d '\0' docker exec jail sh -c |& ts && flag_notify cell-tested
                sed 's/^  //' <<"CELL" | xargs -d '\0' docker exec cell sh -c
                  set -ex -o pipefail
                  while [ ! -f ~/.kube/config ]; do sleep 1; done
                  cd /home/demo/go/src/github.com/gardener/gardener
                  k apply -f example/provider-local/shoot.yaml
                  time k -n garden-local wait shoot local --for=condition=SystemComponentsHealthy --timeout=-1s
                  k apply -f <(yq '.spec.controlPlane.highAvailability.failureTolerance.type="zone"' example/provider-local/shoot.yaml)
                  time k -n garden-local wait shoot local --for=condition=SystemComponentsHealthy --timeout=-1s
                  k annotate shoot local -n garden-local 'confirmation.gardener.cloud/deletion=true'
                  time k delete shoot local -n garden-local
                  touch /tmp/cell-tested
                CELL
              JAIL
            EOF

            new_window "cell" "cell" Enter <<"EOF"
              flag_wait cell-tested &&
              until docker exec jail sh -c "docker exec cell ls /tmp/ready" >/dev/null 2>&1; do sleep 1; done &&
              flag_notify cell-ready &&
              docker exec -it jail sh -c "docker exec -it cell tmux -u a -t gardener-demo"
            EOF
            tmux select-window -t 1
            tmux select-pane -t 0
          SCRIPT_EOF

          chmod +x /usr/local/bin/prepare-*.sh
          /usr/local/bin/prepare-operator-complete.sh

          end=$(date +%s)
          diff=$(( end - start ))
          elapsed=$(date -u -d @${diff} +"%T")
          echo $elapsed > /root/elapsed_until_tmux
          echo "Elapsed time until the tmux session is prepared: ${elapsed}"
          touch /tmp/ready
          wait
        startupProbe:
          exec: {command: [cat, /tmp/ready]}
          failureThreshold: 360 # 1h
          periodSeconds: 10
        env:
        - {name: ENV, value: /root/greeting.sh} # ash sources the ENV file
        - {name: NAMESPACE, valueFrom: {fieldRef: {fieldPath: metadata.namespace}}}
        resources:
          requests: {cpu: 14, memory: 28G}
          limits:   {cpu: 14, memory: 28G}
        securityContext:
          privileged: true
        volumeMounts:
        # Without bind mounting `/sys/fs/cgroup` the nested shoot worker node failed in this DinD pod.
        # Due to bind mounting `/sys/fs/cgroup` from the host, the docker containers in this DinD pod (i.e. the KinD cluster)
        # use a top level cgroup and hence are not constrained by the resource limits of this pod.
        # The host cgroups might leak until the nodes are recreated e.g. when the hosting Gardener dev shoot cluster is hibernated.
        # To avoid conflicts on the top level docker cgroup, only one remote-local-setup-with-jail pod per node is recommended which is enforced by the high resource requests.
        # See
        # https://github.com/kubernetes-sigs/kind/issues/303
        # https://github.com/kubernetes/test-infra/blob/dcf27e157932c3e8680be4ae6cb8a4e2c7acf8cf/config/prow/config.yaml#L978-L988
        # https://github.com/gardener/ci-infra/blob/dff565bced0f386dd1acb0743beb3831dae6c10d/config/prow/config.yaml#L288-L298
        - {name: cgroup,  mountPath: /sys/fs/cgroup}
        - {name: home,    mountPath: /root}
        - {name: home,    mountPath: /var/lib/docker, subPath: .docker}
        - {name: modules, mountPath: /lib/modules, readOnly: true}
      volumes:
      - {name: cgroup,  hostPath: {type: Directory, path: /sys/fs/cgroup}}
      - {name: modules, hostPath: {type: Directory, path: /lib/modules}}
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata: {name: home}
    spec:
      accessModes: [ReadWriteOnce]
      resources: {requests: {storage: 80Gi}}
      volumeMode: Filesystem
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cell-exec
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cell-exec
rules:
- apiGroups: [""]
  resources: ["pods"]
  resourceNames: ["remote-local-setup-with-jail-0"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods/exec"]
  resourceNames: ["remote-local-setup-with-jail-0"]
  verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cell-exec
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cell-exec
subjects:
- kind: ServiceAccount
  name: cell-exec
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cell-exec
spec:
  replicas: 1
  selector: {matchLabels: {app: cell-exec}}
  template:
    metadata: {labels: {app: cell-exec}}
    spec:
      serviceAccountName: cell-exec
      terminationGracePeriodSeconds: 1
      containers:
      - name: dev
        image: alpine:3.20
        stdin: true
        tty: true
        command:
        - /bin/sh
        - -c
        - |
          set -ex -o pipefail

          cd
          mkdir -p ~/.cache/apk
          ln -s ~/.cache/apk /etc/apk/cache
          apk add curl findutils moreutils util-linux-misc wget

          mkdir -p ~/.cache/wget
          cd ~/.cache/wget
          VERSION=$(curl -sL https://dl.k8s.io/release/stable.txt)
          wget -N "https://dl.k8s.io/release/$VERSION/bin/linux/amd64/kubectl"
          cp kubectl /usr/local/bin/kubectl
          chmod +x /usr/local/bin/kubectl

          echo "Wait for the remote-local-setup-with-jail pod to be ready"
          while ! kubectl wait --for=condition=ready pod/remote-local-setup-with-jail-0 --timeout=-1s; do
            sleep 10
          done

          set +x
          echo "Trying to jump into the rls pod, jail container and then into the cell container to attach to the tmux session" | ts
          sed 's/^  //' <<"EOF_EXEC" | xargs -0 \
          kubectl exec remote-local-setup-with-jail-0 -- sh -c | ts
            echo "Exec-ed into the remote local setup pod"
            echo "  Wait for the jail docker container..."
            while ! docker inspect jail >/dev/null 2>&1; do
              echo "  ."
              sleep 10
            done
            echo "  OK"
            sed 's/^  //' <<"EOF_JAIL" | xargs -0 \
            docker exec jail sh -c
              echo "    Exec-ed into the jail container"
              echo "    Wait for the cell docker container..."
              while ! docker inspect cell >/dev/null 2>&1; do
                echo "    ."
                sleep 10
              done
              echo "    OK"
              sed 's/^  //' <<"EOF_CELL" | xargs -0 \
              docker exec cell sh -c
                echo "      Exec-ed into the cell container"
                echo "      Wait for the cell to be ready..."
                while [ ! -e /tmp/ready ]; do
                  echo "      ."
                  sleep 10
                done
                echo "      OK"
                echo "      Wait for the tmux session..."
                while ! tmux ls 2>/dev/null | grep gardener-demo; do
                  echo "      ."
                  sleep 10
                done
                echo "      OK"
              EOF_CELL
            EOF_JAIL
          EOF_EXEC

          echo "The probing worked: attach to the tmux session and mark the pod as ready once tmux produced some output"
          cd
          DATE=$(date +%Y-%m-%d_%H-%M-%S)
          mkdir -p script_recordings/$DATE
          cd script_recordings/$DATE

          {
            while [ ! -s out.log ]; do sleep 1; done
            touch /tmp/ready
          } &
          {
            while [ ! -f input.log ] || [ $(stat -c%s input.log) -lt 10240 ]; do sleep 1; done
            echo "Input limit reached, maybe the user tries to paste a hexdump of a malicious binary, aborting the session"
            killall kubectl # kill 1 did not work
          } &

          sed 's/^  //' <<"EOF" | xargs -o0 \
          script --flush --log-timing timing.log --log-out out.log --log-in input.log --output-limit 100MB -c
            sed 's/^  //' <<"EOF_EXEC" | xargs -o0 \
            kubectl exec -it remote-local-setup-with-jail-0 -- sh -c
              DATE=$(date +%Y-%m-%d_%H-%M-%S)
              mkdir -p ~/script_recordings/$DATE
              cd ~/script_recordings/$DATE
              sed 's/^  //' <<"EOF_SCRIPT" | xargs -o0 \
              script --flush --log-timing timing.log --log-out out.log --log-in input.log --output-limit 100MB -c
                sed 's/^  //' <<"EOF_JAIL" | xargs -o0 \
                docker exec -it --detach-keys="ctrl-p,ctrl-w" jail sh -c
                  sed 's/^  //' <<"EOF_CELL" | xargs -o0 \
                  docker exec -it --detach-keys="ctrl-p,ctrl-w" cell sh -c
                    if [ -e /tmp/ready ]; then
                      export LANG=C.UTF-8
                      export TERM=xterm-256color
                      tmux a -t gardener-demo
                      echo "*** tmux exited"
                    fi
                  EOF_CELL
                  echo "*** docker exec cell exited"
                EOF_JAIL
                echo "*** docker exec jail exited"
              EOF_SCRIPT
              echo "*** script exited"
            EOF_EXEC
            echo "*** k exec  exited"
          EOF
        startupProbe:
          exec: {command: [cat, /tmp/ready]}
          failureThreshold: 360 # 1h
          periodSeconds: 10
        volumeMounts:
        - {name: home, mountPath: /root}
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata: {name: home}
    spec:
      accessModes: [ReadWriteOnce]
      resources: {requests: {storage: 1Gi}}
      volumeMode: Filesystem
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cell-attach
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cell-attach
rules:
- apiGroups: [""]
  resources: ["pods"]
  resourceNames: ["cell-exec-0"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods/attach"]
  resourceNames: ["cell-exec-0"]
  verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cell-attach
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cell-attach
subjects:
- kind: ServiceAccount
  name: cell-attach
---
# apiVersion: apps/v1
# kind: StatefulSet
# metadata:
#   name: attach-test
# spec:
#   replicas: 1
#   selector: {matchLabels: {app: attach-test}}
#   template:
#     metadata: {labels: {app: attach-test}}
#     spec:
#       terminationGracePeriodSeconds: 1
#       containers:
#       - name: alpine
#         image: alpine:3.20
#         stdin: true
#         tty: true
#         command:
#         - /bin/sh
#         - -c
#         - |
#           set -ex -o pipefail
#           sh
#           # https://www.reddit.com/r/kubernetes/comments/1d0isbq/detach_from_running_pod/?rdt=58317
#           # https://github.com/kubernetes/kubectl/issues/1011
#           # kubectl does not support currently to detach from the pod after attaching to it.
#           #
#           # The docker cli supports detaching from a container
#           # with the ctrl-p ctrl-q escape sequence by default.
#           # This is even configurable with the --detach-keys flag.
#           #
#           # For kubectl, the mitigation is to kill the kubectl process
#           # from another terminal, e.g. `pkill kubectl`.
#           # The session is preserved in this case, and it can be attached to again.
#           # Test this by typing e.g. `echo hi` without issuing the command.
#           # After killing the kubectl process and reattaching to the pod,
#           # the typed text is still there.
#           #
#           # Hence for the web terminal, maybe the correct way to detach the session is to close the terminal emulator itself.

# k --as system:serviceaccount:<ns>:cell-attach attach -it cell-exec-0
# get ready time for the cell-exec
