From 30c975e63aef686f91ecb2448a415abe0c2a7e91 Mon Sep 17 00:00:00 2001
From: Christoph Kleineweber <c.kleineweber@sap.com>
Date: Wed, 10 Jul 2024 10:42:16 +0200
Subject: [PATCH 6/7] WIP Separate scrape configs

WIP the scrape config names
- garden-kube-state-metrics-runtime
- seed-kube-state-metrics-seed

contain both a prefix (garden/seed) and a suffix (runtime/seed) that serve a
similar purpose but are slightly different. Could this be aligned somehow? Maybe
we could use only the prefix for these resources to retain the previous
behaviour of having a prefix, but change the prefix garden->runtime to align
with the terminology. We anticipate having both a garden and a runtime
kube-state-metrics instance in the garden namespace, so we will have both
prefixes: garden and runtime in the future.

---
 .../kubestatemetrics/kubestatemetrics.go      |  3 ++
 .../kubestatemetrics/kubestatemetrics_test.go | 43 ++++++++++++-------
 .../monitoring/kubestatemetrics/resources.go  | 14 +++++-
 3 files changed, 42 insertions(+), 18 deletions(-)

diff --git a/pkg/component/observability/monitoring/kubestatemetrics/kubestatemetrics.go b/pkg/component/observability/monitoring/kubestatemetrics/kubestatemetrics.go
index 99c098c02..6eab5f1e4 100644
--- a/pkg/component/observability/monitoring/kubestatemetrics/kubestatemetrics.go
+++ b/pkg/component/observability/monitoring/kubestatemetrics/kubestatemetrics.go
@@ -32,6 +32,9 @@ const (

 	port            = 8080
 	portNameMetrics = "metrics"
+
+	suffixSeed    = "-seed"
+	suffixRuntime = "-runtime"
 )

 // New creates a new instance of DeployWaiter for the kube-state-metrics.
diff --git a/pkg/component/observability/monitoring/kubestatemetrics/kubestatemetrics_test.go b/pkg/component/observability/monitoring/kubestatemetrics/kubestatemetrics_test.go
index 9bd908454..8e608e974 100644
--- a/pkg/component/observability/monitoring/kubestatemetrics/kubestatemetrics_test.go
+++ b/pkg/component/observability/monitoring/kubestatemetrics/kubestatemetrics_test.go
@@ -161,19 +161,24 @@ var _ = Describe("KubeStateMetrics", func() {
 			return obj
 		}
 		serviceFor = func(clusterType component.ClusterType) *corev1.Service {
+			name := "kube-state-metrics"
+			if clusterType == component.ClusterTypeSeed {
+				name += values.NameSuffix
+			}
+
 			obj := &corev1.Service{
 				ObjectMeta: metav1.ObjectMeta{
-					Name:      "kube-state-metrics",
+					Name:      name,
 					Namespace: namespace,
 					Labels: map[string]string{
-						"component": "kube-state-metrics",
+						"component": name,
 						"type":      string(clusterType),
 					},
 				},
 				Spec: corev1.ServiceSpec{
 					Type: corev1.ServiceTypeClusterIP,
 					Selector: map[string]string{
-						"component": "kube-state-metrics",
+						"component": name,
 						"type":      string(clusterType),
 					},
 					Ports: []corev1.ServicePort{{
@@ -198,6 +203,11 @@ var _ = Describe("KubeStateMetrics", func() {
 			return obj
 		}
 		deploymentFor = func(clusterType component.ClusterType) *appsv1.Deployment {
+			name := "kube-state-metrics"
+			if clusterType == component.ClusterTypeSeed {
+				name += values.NameSuffix
+			}
+
 			var (
 				maxUnavailable = intstr.FromInt32(1)
 				selectorLabels = map[string]string{
@@ -216,12 +226,12 @@ var _ = Describe("KubeStateMetrics", func() {

 			if clusterType == component.ClusterTypeSeed {
 				deploymentLabels = map[string]string{
-					"component": "kube-state-metrics",
+					"component": name,
 					"type":      string(clusterType),
 					"role":      "monitoring",
 				}
 				podLabels = map[string]string{
-					"component":                        "kube-state-metrics",
+					"component":                        name,
 					"type":                             string(clusterType),
 					"role":                             "monitoring",
 					"networking.gardener.cloud/to-dns": "allowed",
@@ -354,7 +364,7 @@ var _ = Describe("KubeStateMetrics", func() {

 			return &appsv1.Deployment{
 				ObjectMeta: metav1.ObjectMeta{
-					Name:      "kube-state-metrics",
+					Name:      name,
 					Namespace: namespace,
 					Labels:    deploymentLabels,
 				},
@@ -476,7 +486,7 @@ var _ = Describe("KubeStateMetrics", func() {
 		}
 		scrapeConfigSeed = &monitoringv1alpha1.ScrapeConfig{
 			ObjectMeta: metav1.ObjectMeta{
-				Name:      "seed-kube-state-metrics",
+				Name:      "seed-kube-state-metrics-seed",
 				Namespace: namespace,
 				Labels:    map[string]string{"prometheus": "seed"},
 			},
@@ -491,17 +501,17 @@ var _ = Describe("KubeStateMetrics", func() {
 							"__meta_kubernetes_service_label_component",
 							"__meta_kubernetes_service_port_name",
 						},
-						Regex:  "kube-state-metrics;metrics",
+						Regex:  "kube-state-metrics-seed;metrics",
 						Action: "keep",
 					},
 					{
 						Action:      "replace",
-						Replacement: ptr.To("kube-state-metrics"),
+						Replacement: ptr.To("kube-state-metrics-seed"),
 						TargetLabel: "job",
 					},
 					{
 						TargetLabel: "instance",
-						Replacement: ptr.To("kube-state-metrics"),
+						Replacement: ptr.To("kube-state-metrics-seed"),
 					},
 				},
 				MetricRelabelConfigs: []monitoringv1.RelabelConfig{{
@@ -513,7 +523,7 @@ var _ = Describe("KubeStateMetrics", func() {
 		}
 		scrapeConfigGarden = &monitoringv1alpha1.ScrapeConfig{
 			ObjectMeta: metav1.ObjectMeta{
-				Name:      "garden-kube-state-metrics",
+				Name:      "garden-kube-state-metrics-runtime",
 				Namespace: namespace,
 				Labels:    map[string]string{"prometheus": "garden"},
 			},
@@ -528,17 +538,17 @@ var _ = Describe("KubeStateMetrics", func() {
 							"__meta_kubernetes_service_label_component",
 							"__meta_kubernetes_service_port_name",
 						},
-						Regex:  "kube-state-metrics;metrics",
+						Regex:  "kube-state-metrics-runtime;metrics",
 						Action: "keep",
 					},
 					{
 						Action:      "replace",
-						Replacement: ptr.To("kube-state-metrics"),
+						Replacement: ptr.To("kube-state-metrics-runtime"),
 						TargetLabel: "job",
 					},
 					{
 						TargetLabel: "instance",
-						Replacement: ptr.To("kube-state-metrics"),
+						Replacement: ptr.To("kube-state-metrics-runtime"),
 					},
 				},
 				MetricRelabelConfigs: []monitoringv1.RelabelConfig{
@@ -718,7 +728,7 @@ var _ = Describe("KubeStateMetrics", func() {
 		managedResourceName = ""

 		selectorLabelsClusterTypeSeed := map[string]string{
-			"component": "kube-state-metrics",
+			"component": "kube-state-metrics-seed",
 			"type":      string(component.ClusterTypeSeed),
 		}

@@ -825,8 +835,9 @@ var _ = Describe("KubeStateMetrics", func() {
 					KubernetesVersion: semver.MustParse("1.26.3"),
 					Image:             image,
 					PriorityClassName: priorityClassName,
+					NameSuffix:        "-seed",
 				})
-				managedResourceName = "kube-state-metrics"
+				managedResourceName = "kube-state-metrics-seed"
 			})

 			JustBeforeEach(func() {
diff --git a/pkg/component/observability/monitoring/kubestatemetrics/resources.go b/pkg/component/observability/monitoring/kubestatemetrics/resources.go
index 3cdde7eff..b3276f8e7 100644
--- a/pkg/component/observability/monitoring/kubestatemetrics/resources.go
+++ b/pkg/component/observability/monitoring/kubestatemetrics/resources.go
@@ -67,9 +67,19 @@ func (k *kubeStateMetrics) getResourceConfigs(genericTokenKubeconfigSecretName s
 			component.ResourceConfig{Obj: deployment, Class: component.Runtime, MutateFn: func() { k.reconcileDeployment(deployment, serviceAccount, "", nil) }},
 			component.ResourceConfig{Obj: pdb, Class: component.Runtime, MutateFn: func() { k.reconcilePodDisruptionBudget(pdb, deployment) }},
 			component.ResourceConfig{Obj: scrapeConfigCache, Class: component.Runtime, MutateFn: func() { k.reconcileScrapeConfigCache(scrapeConfigCache) }},
-			component.ResourceConfig{Obj: scrapeConfigSeed, Class: component.Runtime, MutateFn: func() { k.reconcileScrapeConfigSeed(scrapeConfigSeed) }},
-			component.ResourceConfig{Obj: scrapeConfigGarden, Class: component.Runtime, MutateFn: func() { k.reconcileScrapeConfigGarden(scrapeConfigGarden) }},
 		)
+
+		if k.values.NameSuffix == suffixSeed {
+			configs = append(configs,
+				component.ResourceConfig{Obj: scrapeConfigSeed, Class: component.Runtime, MutateFn: func() { k.reconcileScrapeConfigSeed(scrapeConfigSeed) }},
+			)
+		}
+
+		if k.values.NameSuffix == suffixRuntime {
+			configs = append(configs,
+				component.ResourceConfig{Obj: scrapeConfigGarden, Class: component.Runtime, MutateFn: func() { k.reconcileScrapeConfigGarden(scrapeConfigGarden) }},
+			)
+		}
 	}

 	if k.values.ClusterType == component.ClusterTypeShoot {
--
2.44.0
