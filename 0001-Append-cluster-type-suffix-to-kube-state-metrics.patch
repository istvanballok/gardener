From 5ced1f8a9a85ece154a7ec7af9acda5ab1ffeaeb Mon Sep 17 00:00:00 2001
From: Christoph Kleineweber <c.kleineweber@sap.com>
Date: Wed, 3 Jul 2024 15:27:33 +0200
Subject: [PATCH 1/7] Append cluster type suffix to kube-state-metrics

---
 .../kubestatemetrics/kubestatemetrics.go      |  6 ++-
 .../monitoring/kubestatemetrics/resources.go  | 42 +++++++++----------
 pkg/component/shared/kube_state_metrics.go    |  2 +
 .../controller/seed/seed/components.go        |  1 +
 .../controller/garden/garden/components.go    |  1 +
 5 files changed, 29 insertions(+), 23 deletions(-)

diff --git a/pkg/component/observability/monitoring/kubestatemetrics/kubestatemetrics.go b/pkg/component/observability/monitoring/kubestatemetrics/kubestatemetrics.go
index 26d2fbcce..99c098c02 100644
--- a/pkg/component/observability/monitoring/kubestatemetrics/kubestatemetrics.go
+++ b/pkg/component/observability/monitoring/kubestatemetrics/kubestatemetrics.go
@@ -74,6 +74,8 @@ type Values struct {
 	Replicas int32
 	// IsWorkerless specifies whether the cluster has worker nodes.
 	IsWorkerless bool
+	// NameSuffix is attached to the deployment name and related resources.
+	NameSuffix string
 }
 
 func (k *kubeStateMetrics) Deploy(ctx context.Context) error {
@@ -137,7 +139,7 @@ func (k *kubeStateMetrics) WaitCleanup(ctx context.Context) error {
 
 func (k *kubeStateMetrics) managedResourceName() string {
 	if k.values.ClusterType == component.ClusterTypeSeed {
-		return managedResourceName
+		return managedResourceName + k.values.NameSuffix
 	}
-	return managedResourceNameShoot
+	return managedResourceNameShoot + k.values.NameSuffix
 }
diff --git a/pkg/component/observability/monitoring/kubestatemetrics/resources.go b/pkg/component/observability/monitoring/kubestatemetrics/resources.go
index c999d4050..16d4d2e06 100644
--- a/pkg/component/observability/monitoring/kubestatemetrics/resources.go
+++ b/pkg/component/observability/monitoring/kubestatemetrics/resources.go
@@ -90,7 +90,7 @@ func (k *kubeStateMetrics) getResourceConfigs(genericTokenKubeconfigSecretName s
 }
 
 func (k *kubeStateMetrics) emptyServiceAccount() *corev1.ServiceAccount {
-	return &corev1.ServiceAccount{ObjectMeta: metav1.ObjectMeta{Name: "kube-state-metrics", Namespace: k.namespace}}
+	return &corev1.ServiceAccount{ObjectMeta: metav1.ObjectMeta{Name: "kube-state-metrics" + k.values.NameSuffix, Namespace: k.namespace}}
 }
 
 func (k *kubeStateMetrics) reconcileServiceAccount(serviceAccount *corev1.ServiceAccount) {
@@ -169,7 +169,7 @@ func (k *kubeStateMetrics) reconcileClusterRoleBinding(clusterRoleBinding *rbacv
 }
 
 func (k *kubeStateMetrics) emptyService() *corev1.Service {
-	return &corev1.Service{ObjectMeta: metav1.ObjectMeta{Name: "kube-state-metrics", Namespace: k.namespace}}
+	return &corev1.Service{ObjectMeta: metav1.ObjectMeta{Name: "kube-state-metrics" + k.values.NameSuffix, Namespace: k.namespace}}
 }
 
 func (k *kubeStateMetrics) reconcileService(service *corev1.Service) {
@@ -201,7 +201,7 @@ func (k *kubeStateMetrics) reconcileService(service *corev1.Service) {
 }
 
 func (k *kubeStateMetrics) emptyDeployment() *appsv1.Deployment {
-	return &appsv1.Deployment{ObjectMeta: metav1.ObjectMeta{Name: "kube-state-metrics", Namespace: k.namespace}}
+	return &appsv1.Deployment{ObjectMeta: metav1.ObjectMeta{Name: "kube-state-metrics" + k.values.NameSuffix, Namespace: k.namespace}}
 }
 
 func (k *kubeStateMetrics) reconcileDeployment(
@@ -318,7 +318,7 @@ func (k *kubeStateMetrics) reconcileDeployment(
 }
 
 func (k *kubeStateMetrics) emptyVerticalPodAutoscaler() *vpaautoscalingv1.VerticalPodAutoscaler {
-	return &vpaautoscalingv1.VerticalPodAutoscaler{ObjectMeta: metav1.ObjectMeta{Name: "kube-state-metrics-vpa", Namespace: k.namespace}}
+	return &vpaautoscalingv1.VerticalPodAutoscaler{ObjectMeta: metav1.ObjectMeta{Name: "kube-state-metrics-vpa" + k.values.NameSuffix, Namespace: k.namespace}}
 }
 
 func (k *kubeStateMetrics) reconcileVerticalPodAutoscaler(vpa *vpaautoscalingv1.VerticalPodAutoscaler, deployment *appsv1.Deployment) {
@@ -349,7 +349,7 @@ func (k *kubeStateMetrics) reconcileVerticalPodAutoscaler(vpa *vpaautoscalingv1.
 }
 
 func (k *kubeStateMetrics) emptyPodDisruptionBudget() *policyv1.PodDisruptionBudget {
-	return &policyv1.PodDisruptionBudget{ObjectMeta: metav1.ObjectMeta{Name: "kube-state-metrics-pdb", Namespace: k.namespace}}
+	return &policyv1.PodDisruptionBudget{ObjectMeta: metav1.ObjectMeta{Name: "kube-state-metrics-pdb" + k.values.NameSuffix, Namespace: k.namespace}}
 }
 
 func (k *kubeStateMetrics) reconcilePodDisruptionBudget(podDisruptionBudget *policyv1.PodDisruptionBudget, deployment *appsv1.Deployment) {
@@ -387,12 +387,12 @@ func (k *kubeStateMetrics) standardScrapeConfigSpec(allowedMetrics ...string) mo
 			},
 			{
 				Action:      "replace",
-				Replacement: ptr.To("kube-state-metrics"),
+				Replacement: ptr.To("kube-state-metrics" + k.values.NameSuffix),
 				TargetLabel: "job",
 			},
 			{
 				TargetLabel: "instance",
-				Replacement: ptr.To("kube-state-metrics"),
+				Replacement: ptr.To("kube-state-metrics" + k.values.NameSuffix),
 			},
 		},
 		MetricRelabelConfigs: append([]monitoringv1.RelabelConfig{{
@@ -458,7 +458,7 @@ var cachePrometheusAllowedMetrics = []string{
 }
 
 func (k *kubeStateMetrics) emptyScrapeConfigCache() *monitoringv1alpha1.ScrapeConfig {
-	return &monitoringv1alpha1.ScrapeConfig{ObjectMeta: monitoringutils.ConfigObjectMeta("kube-state-metrics", k.namespace, cache.Label)}
+	return &monitoringv1alpha1.ScrapeConfig{ObjectMeta: monitoringutils.ConfigObjectMeta("kube-state-metrics"+k.values.NameSuffix, k.namespace, cache.Label)}
 }
 
 func (k *kubeStateMetrics) reconcileScrapeConfigCache(scrapeConfig *monitoringv1alpha1.ScrapeConfig) {
@@ -467,7 +467,7 @@ func (k *kubeStateMetrics) reconcileScrapeConfigCache(scrapeConfig *monitoringv1
 }
 
 func (k *kubeStateMetrics) emptyScrapeConfigSeed() *monitoringv1alpha1.ScrapeConfig {
-	return &monitoringv1alpha1.ScrapeConfig{ObjectMeta: monitoringutils.ConfigObjectMeta("kube-state-metrics", k.namespace, seed.Label)}
+	return &monitoringv1alpha1.ScrapeConfig{ObjectMeta: monitoringutils.ConfigObjectMeta("kube-state-metrics"+k.values.NameSuffix, k.namespace, seed.Label)}
 }
 
 func (k *kubeStateMetrics) reconcileScrapeConfigSeed(scrapeConfig *monitoringv1alpha1.ScrapeConfig) {
@@ -483,17 +483,17 @@ func (k *kubeStateMetrics) reconcileScrapeConfigSeed(scrapeConfig *monitoringv1a
 					"__meta_kubernetes_service_label_component",
 					"__meta_kubernetes_service_port_name",
 				},
-				Regex:  "kube-state-metrics;" + portNameMetrics,
+				Regex:  "kube-state-metrics" + k.values.NameSuffix + ";" + portNameMetrics,
 				Action: "keep",
 			},
 			{
 				Action:      "replace",
-				Replacement: ptr.To("kube-state-metrics"),
+				Replacement: ptr.To("kube-state-metrics" + k.values.NameSuffix),
 				TargetLabel: "job",
 			},
 			{
 				TargetLabel: "instance",
-				Replacement: ptr.To("kube-state-metrics"),
+				Replacement: ptr.To("kube-state-metrics" + k.values.NameSuffix),
 			},
 		},
 		MetricRelabelConfigs: []monitoringv1.RelabelConfig{{
@@ -505,7 +505,7 @@ func (k *kubeStateMetrics) reconcileScrapeConfigSeed(scrapeConfig *monitoringv1a
 }
 
 func (k *kubeStateMetrics) emptyScrapeConfigGarden() *monitoringv1alpha1.ScrapeConfig {
-	return &monitoringv1alpha1.ScrapeConfig{ObjectMeta: monitoringutils.ConfigObjectMeta("kube-state-metrics", k.namespace, garden.Label)}
+	return &monitoringv1alpha1.ScrapeConfig{ObjectMeta: monitoringutils.ConfigObjectMeta("kube-state-metrics"+k.values.NameSuffix, k.namespace, garden.Label)}
 }
 
 func (k *kubeStateMetrics) reconcileScrapeConfigGarden(scrapeConfig *monitoringv1alpha1.ScrapeConfig) {
@@ -521,17 +521,17 @@ func (k *kubeStateMetrics) reconcileScrapeConfigGarden(scrapeConfig *monitoringv
 					"__meta_kubernetes_service_label_component",
 					"__meta_kubernetes_service_port_name",
 				},
-				Regex:  "kube-state-metrics;" + portNameMetrics,
+				Regex:  "kube-state-metrics" + k.values.NameSuffix + ";" + portNameMetrics,
 				Action: "keep",
 			},
 			{
 				Action:      "replace",
-				Replacement: ptr.To("kube-state-metrics"),
+				Replacement: ptr.To("kube-state-metrics" + k.values.NameSuffix),
 				TargetLabel: "job",
 			},
 			{
 				TargetLabel: "instance",
-				Replacement: ptr.To("kube-state-metrics"),
+				Replacement: ptr.To("kube-state-metrics" + k.values.NameSuffix),
 			},
 		},
 		MetricRelabelConfigs: append([]monitoringv1.RelabelConfig{
@@ -553,7 +553,7 @@ func (k *kubeStateMetrics) reconcileScrapeConfigGarden(scrapeConfig *monitoringv
 }
 
 func (k *kubeStateMetrics) emptyScrapeConfigShoot() *monitoringv1alpha1.ScrapeConfig {
-	return &monitoringv1alpha1.ScrapeConfig{ObjectMeta: monitoringutils.ConfigObjectMeta("kube-state-metrics", k.namespace, shoot.Label)}
+	return &monitoringv1alpha1.ScrapeConfig{ObjectMeta: monitoringutils.ConfigObjectMeta("kube-state-metrics"+k.values.NameSuffix, k.namespace, shoot.Label)}
 }
 
 func (k *kubeStateMetrics) reconcileScrapeConfigShoot(scrapeConfig *monitoringv1alpha1.ScrapeConfig) {
@@ -610,13 +610,13 @@ func (k *kubeStateMetrics) reconcileScrapeConfigShoot(scrapeConfig *monitoringv1
 }
 
 func (k *kubeStateMetrics) emptyPrometheusRuleShoot() *monitoringv1.PrometheusRule {
-	return &monitoringv1.PrometheusRule{ObjectMeta: monitoringutils.ConfigObjectMeta("kube-state-metrics", k.namespace, shoot.Label)}
+	return &monitoringv1.PrometheusRule{ObjectMeta: monitoringutils.ConfigObjectMeta("kube-state-metrics"+k.values.NameSuffix, k.namespace, shoot.Label)}
 }
 
 func (k *kubeStateMetrics) reconcilePrometheusRuleShoot(prometheusRule *monitoringv1.PrometheusRule) {
 	rules := []monitoringv1.Rule{{
 		Alert: "KubeStateMetricsSeedDown",
-		Expr:  intstr.FromString(`absent(count({exported_job="kube-state-metrics"}))`),
+		Expr:  intstr.FromString(`absent(count({exported_job="kube-state-metrics` + k.values.NameSuffix + `"}))`),
 		For:   ptr.To(monitoringv1.Duration("15m")),
 		Labels: map[string]string{
 			"service":    "kube-state-metrics-seed",
@@ -634,7 +634,7 @@ func (k *kubeStateMetrics) reconcilePrometheusRuleShoot(prometheusRule *monitori
 		rules = append(rules,
 			monitoringv1.Rule{
 				Alert: "KubeStateMetricsShootDown",
-				Expr:  intstr.FromString(`absent(up{job="kube-state-metrics", type="shoot"} == 1)`),
+				Expr:  intstr.FromString(`absent(up{job="kube-state-metrics"` + k.values.NameSuffix + `, type="shoot"} == 1)`),
 				For:   ptr.To(monitoringv1.Duration("15m")),
 				Labels: map[string]string{
 					"service":    "kube-state-metrics-shoot",
@@ -714,7 +714,7 @@ func (k *kubeStateMetrics) getLabels() map[string]string {
 	}
 
 	return map[string]string{
-		labelKeyComponent: labelValueComponent,
+		labelKeyComponent: labelValueComponent + k.values.NameSuffix,
 		labelKeyType:      t,
 	}
 }
diff --git a/pkg/component/shared/kube_state_metrics.go b/pkg/component/shared/kube_state_metrics.go
index 5444f11b3..29e22aa21 100644
--- a/pkg/component/shared/kube_state_metrics.go
+++ b/pkg/component/shared/kube_state_metrics.go
@@ -20,6 +20,7 @@ func NewKubeStateMetrics(
 	gardenNamespaceName string,
 	runtimeVersion *semver.Version,
 	priorityClassName string,
+	nameSuffix string,
 ) (
 	component.DeployWaiter,
 	error,
@@ -35,5 +36,6 @@ func NewKubeStateMetrics(
 		Image:             image.String(),
 		PriorityClassName: priorityClassName,
 		Replicas:          2,
+		NameSuffix:        nameSuffix,
 	}), nil
 }
diff --git a/pkg/gardenlet/controller/seed/seed/components.go b/pkg/gardenlet/controller/seed/seed/components.go
index c43a1266a..9c28cc7ef 100644
--- a/pkg/gardenlet/controller/seed/seed/components.go
+++ b/pkg/gardenlet/controller/seed/seed/components.go
@@ -796,6 +796,7 @@ func (r *Reconciler) newKubeStateMetrics() (component.DeployWaiter, error) {
 		r.GardenNamespace,
 		r.SeedVersion,
 		v1beta1constants.PriorityClassNameSeedSystem600,
+		"-seed",
 	)
 }
 
diff --git a/pkg/operator/controller/garden/garden/components.go b/pkg/operator/controller/garden/garden/components.go
index 8c281534f..36f8b5ed7 100644
--- a/pkg/operator/controller/garden/garden/components.go
+++ b/pkg/operator/controller/garden/garden/components.go
@@ -758,6 +758,7 @@ func (r *Reconciler) newKubeStateMetrics() (component.DeployWaiter, error) {
 		r.GardenNamespace,
 		r.RuntimeVersion,
 		v1beta1constants.PriorityClassNameGardenSystem100,
+		"-runtime",
 	)
 }
 
-- 
2.44.0

